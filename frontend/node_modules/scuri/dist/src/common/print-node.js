"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printKindAndTextRecursive = exports.printKindAndText = void 0;
const os_1 = require("os");
const ts = require("../../lib/third_party/github.com/Microsoft/TypeScript/lib/typescript");
function printKindAndText(node, printOutSpaces = false) {
    if (node != null) {
        if (Array.isArray(node)) {
            node.forEach(n => printKindAndText(n, printOutSpaces));
        }
        else {
            // tslint:disable-next-line:no-console
            console.log(_formatTextWithSpaces(node, printOutSpaces), 'kind:', ts.SyntaxKind[node.kind], os_1.EOL);
        }
    }
    else {
        // tslint:disable-next-line:no-console
        console.log('this is empty');
    }
}
exports.printKindAndText = printKindAndText;
let depth = 1;
let maxDepth = 5;
function printKindAndTextRecursive(node, printOutSpaces = false) {
    if (node != null) {
        if (Array.isArray(node)) {
            node.forEach(c => printKindAndTextRecursive(c, printOutSpaces));
        }
        else {
            // tslint:disable-next-line:no-console
            console.log(_formatTextWithSpaces(node, printOutSpaces), os_1.EOL, 'kind:', ts.SyntaxKind[node.kind], 'depth:', depth, os_1.EOL);
            depth += 1;
            const children = node.getChildren();
            if (Array.isArray(children) && depth <= maxDepth) {
                printKindAndTextRecursive(children, printOutSpaces);
            }
            depth -= 1;
        }
    }
    else {
        // tslint:disable-next-line:no-console
        console.log('this is empty');
    }
}
exports.printKindAndTextRecursive = printKindAndTextRecursive;
function _formatTextWithSpaces(node, printOutSpaces) {
    const text = typeof node === 'string' ? node : node.getFullText();
    return printOutSpaces
        ? text
            .replace(/(\r\n|\r|\n)/g, 'NEW_LINE_MF')
            .replace(/\s/g, '•')
            .replace(/NEW_LINE_MF/g, '¶' + os_1.EOL)
        : text;
}
//# sourceMappingURL=print-node.js.map