{"version":3,"file":"angularjs-testbed.umd.js","sources":["../src/By.ts","../src/DebugElement.ts","../src/ComponentFixture.ts","../src/TestBed.ts"],"sourcesContent":["export class By {\n  public static css(selector: string) {\n    return selector;\n  }\n}\n","import { element } from 'angular';\n\nexport class DebugElement {\n  constructor(selector: JQuery.Selector | Element | JQuery) {\n    const de = element(selector) as DebugElement;\n    de.query = this.query;\n    de.nativeElement = de[0];\n    return de;\n  }\n  query(selector: JQuery.Selector | Element | JQuery): DebugElement {\n    return new DebugElement(selector);\n  }\n}\n\nexport interface DebugElement extends JQLite {\n  nativeElement: HTMLElement;\n  query(selector: JQuery.Selector | Element | JQuery): DebugElement;\n}\n","import { DebugElement } from './DebugElement';\n\nexport class ComponentFixture<T> {\n  /**\n   * The DebugElement associated with the root element of this component.\n   */\n  debugElement: DebugElement;\n\n  /**\n   * The instance of the root component class.\n   */\n  componentInstance: T;\n\n  /**\n   * The native element at the root of the component.\n   */\n  nativeElement: HTMLElement;\n\n  private _isDestroyed = false;\n\n  constructor(private element: JQLite) {\n    this.componentInstance = element.controller((element as any).componentName); // componentName is attached to element in TestBed  _compileComponent method\n    this.debugElement = new DebugElement(element);\n    this.nativeElement = this.debugElement.nativeElement;\n  }\n  /**\n   * Trigger a change detection cycle for the component.\n   */\n  detectChanges(): void {\n    this.element.scope().$digest();\n  }\n\n  /**\n   * Trigger component destruction.\n   */\n  destroy(): void {\n    if (!this._isDestroyed) {\n      this.element.detach();\n      this._isDestroyed = true;\n    }\n  }\n}\n","import * as angular from 'angular';\nimport 'angular-mocks';\nimport { IMockStatic } from 'angular';\nimport { camelToKebab, getTypeName, kebabToCamel, ModuleConfig, NgModule, Provider, Type } from 'angular-ts-decorators';\nimport { ComponentFixture } from './ComponentFixture';\n\nlet _testBed: TestBed = null;\n\n/** @internal */\nexport const DynamicTestModuleId = 'DynamicTestModule';\n// let _nextRootElementId = 0;\n\n/**\n * @whatItDoes Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n * @description\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n */\nexport class TestBed {\n  private _providers: Provider[] = [];\n  private _declarations: Array<Type<any>|any[]|any> = [];\n  private _imports: Array<Type<any>|any[]|any> = [];\n  private _activeFixtures: Array<ComponentFixture<any>> = [];\n  private _moduleRef: IMockStatic['module'] = null;\n  private _instantiated = false;\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  public static configureTestingModule(moduleDef: ModuleConfig): typeof TestBed {\n    getTestBed().configureTestingModule(moduleDef);\n    return TestBed;\n  }\n\n  static resetTestingModule(): typeof TestBed {\n    getTestBed().resetTestingModule();\n    return TestBed;\n  }\n\n  static compileComponents() { return getTestBed().compileComponents(); }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return getTestBed().createComponent(component);\n  }\n\n  static get(token: any) {\n    token = typeof token === 'string' ? token : getTypeName(token);\n    return getTestBed().get(token);\n  }\n\n  get(token: any) {\n    this._initIfNeeded();\n    if (token === TestBed) {\n      return this;\n    }\n    let result: any = null;\n    angular.mock.inject([`${token}`, (token: any) => {\n      result = token\n    }]);\n    return result;\n  }\n\n  configureTestingModule(moduleDef: ModuleConfig) {\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n  }\n\n  resetTestingModule() {\n    this._moduleRef = null;\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', fixture.componentInstance);\n      }\n    });\n    this._activeFixtures = [];\n  }\n\n  compileComponents() {\n    this._initIfNeeded();\n  }\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n    // const componentFactory = null; // this._compiler.getComponentFactory(component);\n    //\n    // if (!componentFactory) {\n    //   throw new Error(\n    //     `Cannot create the component ${component['name']} as it was not imported into the testing module!`);\n    // }\n    // const rootElId = `root${_nextRootElementId++}`;\n    // testComponentRenderer.insertRootElement(rootElId);\n\n    const initComponent = () => {\n      // const componentRef = componentFactory.create(null, [], `#${rootElId}`, this._moduleRef);\n      const componentRef = this._compileComponent(component);\n      return new ComponentFixture<T>(componentRef);\n    };\n\n    const fixture = initComponent();\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n\n  private _initIfNeeded() {\n    if (this._instantiated) {\n      return;\n    }\n    this._moduleRef = this._createModule();\n    this._instantiated = true;\n  }\n\n  private _createModule(): any {\n    // const providers = this._providers.concat([{provide: TestBed, useValue: this}]);\n    // const declarations = [...this._declarations];\n    // const imports = [this.ngModule, this._imports];\n    const providers = this._providers;\n    const declarations = this._declarations;\n    const imports = this._imports;\n\n    @NgModule({ id: DynamicTestModuleId, providers, declarations, imports })\n    class DynamicTestModule {}\n\n    return angular.mock.module(DynamicTestModuleId);\n  }\n\n  private _compileComponent(component: Type<any>): JQLite {\n    const componentName = getTypeName(component);\n    const selector = camelToKebab(componentName);\n    const $div = `<${selector}></${selector}>`;\n    let element: JQLite = null;\n    angular.mock.inject(($compile: ng.ICompileService, $rootScope: ng.IRootScopeService) => {\n      const $scope = $rootScope.$new();\n      element = $compile($div)($scope);\n    });\n    (element as any).componentName = kebabToCamel(componentName);\n    return element;\n  }\n}\n\nexport function getTestBed() {\n  return _testBed = _testBed || new TestBed();\n}\n"],"names":["element","getTypeName","angular.mock","NgModule","camelToKebab","kebabToCamel"],"mappings":"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"}