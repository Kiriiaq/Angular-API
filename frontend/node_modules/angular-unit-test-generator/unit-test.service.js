"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var template_service_1 = require("./template.service");
var spy_service_1 = require("./spy.service");
var dependencies_service_1 = require("./dependencies.service");
var index_template_variables_1 = require("./constants/index-template-variables");
var entity_service_1 = require("./entity.service");
var method_test_template_variables_1 = require("./constants/method-test-template-variables");
var config_service_1 = require("./config.service");
var UnitTestService = (function () {
    function UnitTestService(entityPath, fileContent) {
        this.fileContent = fileContent;
        this.entity = new entity_service_1.EntityService(entityPath, fileContent);
        this.dependencies = new dependencies_service_1.DependenciesService(fileContent);
        this.spies = new spy_service_1.SpyService(fileContent, this.dependencies.list);
    }
    UnitTestService.prototype.readInfoFromSUT = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.config = new config_service_1.ConfigService();
                        return [4, this.config.read()];
                    case 1:
                        _a.sent();
                        this.logInfo();
                        return [2];
                }
            });
        });
    };
    UnitTestService.prototype.saveToFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var testContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.generateTestContent()];
                    case 1:
                        testContent = _a.sent();
                        return [4, this.createSpecFile(testContent)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    UnitTestService.prototype.generateTestContent = function () {
        return __awaiter(this, void 0, void 0, function () {
            var indexTemplate, _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        indexTemplate = new template_service_1.TemplateService('./templates/index.template');
                        return [4, indexTemplate.read()];
                    case 1:
                        _e.sent();
                        _b = (_a = indexTemplate).fillPlaceholders;
                        _c = index_template_variables_1.IndexTemplateVariables.bind;
                        _d = {
                            entityName: this.entity.name,
                            entityType: this.entity.type,
                            entityPath: this.entity.baseFilePathWithoutExt,
                            spyDeclarations: this.spies.declarations,
                            spyArguments: this.spies.arguments,
                            spyInitializations: this.spies.initializations,
                            spyImports: this.spies.imports
                        };
                        return [4, this.generateMethodsTests()];
                    case 2:
                        _b.apply(_a, [new (_c.apply(index_template_variables_1.IndexTemplateVariables, [void 0, (_d.methodsTests = _e.sent(),
                                    _d.spyUtilsPath = this.config.getSpyUtilsPath(),
                                    _d)]))()]);
                        return [2, indexTemplate.template];
                }
            });
        });
    };
    UnitTestService.prototype.generateMethodsTests = function () {
        return __awaiter(this, void 0, void 0, function () {
            var methodTestTemplate, publicMethods, startingSpace, testsTemplate;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        methodTestTemplate = new template_service_1.TemplateService('./templates/method-test.template');
                        return [4, methodTestTemplate.read()];
                    case 1:
                        _a.sent();
                        publicMethods = this.entity.methods
                            .filter(function (method) { return method.modifier === 'public'; });
                        if (!publicMethods.length) {
                            return [2];
                        }
                        startingSpace = '\n\n';
                        testsTemplate = publicMethods.reduce(function (result, method, index) {
                            var isLast = index === publicMethods.length - 1;
                            var newMethodTestTemplate = new template_service_1.TemplateService('');
                            newMethodTestTemplate.template = methodTestTemplate.template;
                            newMethodTestTemplate.fillPlaceholders(new method_test_template_variables_1.MethodTestTemplateVariables({
                                methodName: method.name,
                                entityType: _this.entity.type,
                            }));
                            result = result + ("" + newMethodTestTemplate.template + (isLast ? '' : '\n\n'));
                            return result;
                        }, '');
                        return [2, startingSpace + testsTemplate];
                }
            });
        });
    };
    UnitTestService.prototype.logInfo = function () {
        console.log('config path is', this.config.configPath);
        console.log('entity path is', this.entity.path);
        console.log('entity spec path is', this.entity.specPath);
        console.log('entity type is', this.entity.type);
        console.log('entity has dependencies:', this.dependencies.list.map(function (dep) { return dep.type; }));
        console.log('entity has methods:', this.entity.methods.map(function (dep) { return dep.name; }));
    };
    UnitTestService.prototype.createSpecFile = function (content) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, utils_1.writeFile(this.entity.specPath, content)];
            });
        });
    };
    return UnitTestService;
}());
exports.UnitTestService = UnitTestService;
