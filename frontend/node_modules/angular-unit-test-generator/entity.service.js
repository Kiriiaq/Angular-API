"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var method_1 = require("./constants/method");
var EntityService = (function () {
    function EntityService(path, fileContent) {
        this.path = path;
        this.fileContent = fileContent;
        this.initEntityInfo();
    }
    EntityService.prototype.initEntityInfo = function () {
        this.name = utils_1.getClassName(this.fileContent);
        this.baseFilePath = utils_1.getBaseFilePath(this.path);
        this.baseFilePathWithoutExt = utils_1.removeExtension(this.baseFilePath);
        this.type = this.getEntityType(this.baseFilePathWithoutExt);
        this.methods = this.getMethods();
        this.specPath = this.generateSpecPath();
    };
    EntityService.prototype.getEntityType = function (filename) {
        var pointEntityIndex = filename.lastIndexOf('.');
        var entityType = filename.slice(pointEntityIndex + 1, filename.length);
        return entityType;
    };
    EntityService.prototype.getMethods = function () {
        var regExp = /}\s*(private|public)?(.*)\(.*\)(\W*:(.*))?\W*{/gm;
        var methodsMatch = utils_1.matchAllEntities(this.fileContent, regExp);
        return methodsMatch.reduce(function (result, methodMatch) {
            result.push(new method_1.Method({
                name: methodMatch[2] && methodMatch[2].trim(),
                modifier: methodMatch[1],
                returnType: methodMatch[4] && methodMatch[4].trim()
            }));
            return result;
        }, []);
    };
    EntityService.prototype.generateSpecPath = function () {
        var pointExtensionIndex = this.path.lastIndexOf('.');
        var extension = this.path.slice(pointExtensionIndex + 1, this.path.length);
        var filePathWithoutExtension = utils_1.removeExtension(this.path);
        return filePathWithoutExtension + ".spec." + extension;
    };
    return EntityService;
}());
exports.EntityService = EntityService;
