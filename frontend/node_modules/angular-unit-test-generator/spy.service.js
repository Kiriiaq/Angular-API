"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var SpyService = (function () {
    function SpyService(fileContent, deps) {
        this.fileContent = fileContent;
        this.deps = deps;
        this.initSpies();
    }
    SpyService.prototype.initSpies = function () {
        this.declarations = this.generateSpyDeclarations();
        this.arguments = this.generateSpyArguments();
        this.initializations = this.generateSpyInitializations();
        this.imports = this.generateSpyImports();
    };
    SpyService.prototype.generateSpyArguments = function () {
        var _this = this;
        return this.deps.reduce(function (result, dep, index) {
            var isLast = index === _this.deps.length - 1;
            result = result + ("      " + dep.name + "Spy," + (isLast ? '' : '\n'));
            return result;
        }, '');
    };
    SpyService.prototype.generateSpyDeclarations = function () {
        var _this = this;
        return this.deps.reduce(function (result, dep, index) {
            var isLast = index === _this.deps.length - 1;
            result = result + ("  let " + dep.name + "Spy: SpyObj<" + dep.type + ">;" + (isLast ? '' : '\n'));
            return result;
        }, '');
    };
    SpyService.prototype.generateSpyInitializations = function () {
        var _this = this;
        return this.deps.reduce(function (result, dep, index) {
            var isLast = index === _this.deps.length - 1;
            var spyMethodsTemplate = _this.generateSpyMethodsTemplate(dep.name);
            var spyName = dep.generic
                ? dep.typeWithoutGeneric
                : dep.type;
            result = result + ("    " + dep.name + "Spy = createSpyObj<" + dep.type + ">('" + spyName + "', [\n" + spyMethodsTemplate + "\n    ]);" + (isLast ? '' : '\n'));
            return result;
        }, '');
    };
    SpyService.prototype.generateSpyImports = function () {
        var _this = this;
        return this.deps.reduce(function (result, dep, index) {
            var isLast = index === _this.deps.length - 1;
            if (!!dep.generic) {
                result = result + _this.generateSpyImport(dep.typeWithoutGeneric, isLast);
                result = result + _this.generateSpyImport(dep.generic, isLast);
            }
            else {
                result = result + _this.generateSpyImport(dep.type, isLast);
            }
            return result;
        }, '');
    };
    SpyService.prototype.generateSpyImport = function (depImportType, isLast) {
        var pathForGeneric = this.getPathForSpy(depImportType);
        return "import { " + depImportType + " } from '" + pathForGeneric + "';" + (isLast ? '' : '\n');
    };
    SpyService.prototype.getPathForSpy = function (spyType) {
        var encapsulatedSpyType = utils_1.escapeRegExpChar(spyType);
        var searchString = encapsulatedSpyType + "[,\\s\\w}]*from\\W*'(.*)'";
        var regExp = new RegExp(searchString);
        var result = regExp.exec(this.fileContent);
        if (result) {
            return result[1];
        }
        else {
            return null;
        }
    };
    SpyService.prototype.generateSpyMethodsTemplate = function (spyName) {
        var uniqueSpies = this.getSpyMethods(spyName);
        return uniqueSpies.reduce(function (result, spy, index) {
            var isLast = index === uniqueSpies.length - 1;
            result = result + ("      '" + spy + "'," + (isLast ? '' : '\n'));
            return result;
        }, '');
    };
    SpyService.prototype.getSpyMethods = function (spyName) {
        var encapsulatedSpyName = utils_1.escapeRegExpChar(spyName);
        var regExp = new RegExp(encapsulatedSpyName + "\\.(?<method>[A-Za-z0-9]*)\\(", 'g');
        var spyMethodsMatch = utils_1.matchAllEntities(this.fileContent, regExp);
        var spies = spyMethodsMatch.reduce(function (result, spyMethodMatch) {
            result.push(spyMethodMatch.groups.method);
            return result;
        }, []);
        return Array.from(new Set(spies));
    };
    return SpyService;
}());
exports.SpyService = SpyService;
