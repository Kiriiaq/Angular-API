{"ast":null,"code":"/**\r\n * @license Angular v13.0.3\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\nimport { Location, LocationStrategy } from '@angular/common';\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\nimport * as i0 from '@angular/core';\nimport { Compiler, Injector, Optional, NgModule } from '@angular/core';\nimport { Router, ɵflatten, ɵassignExtraOptionsToRouter, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, UrlHandlingStrategy, RouteReuseStrategy, PreloadingStrategy, NoPreloading } from '@angular/router';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// This file exists to easily patch the SpyNgModuleFactoryLoader into g3\n\nconst EXTRA_ROUTER_TESTING_PROVIDERS = [];\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nfunction isUrlHandlingStrategy(opts) {\n  // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n  // runtime.\n  return 'shouldProcessUrl' in opts;\n}\n/**\r\n * Router setup factory function used for testing.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction setupTestingRouter(urlSerializer, contexts, location, compiler, injector, routes, opts, urlHandlingStrategy, routeReuseStrategy) {\n  const router = new Router(null, urlSerializer, contexts, location, injector, compiler, ɵflatten(routes));\n\n  if (opts) {\n    // Handle deprecated argument ordering.\n    if (isUrlHandlingStrategy(opts)) {\n      router.urlHandlingStrategy = opts;\n    } else {\n      // Handle ExtraOptions\n      ɵassignExtraOptionsToRouter(opts, router);\n    }\n  }\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  return router;\n}\n/**\r\n * @description\r\n *\r\n * Sets up the router to be used for testing.\r\n *\r\n * The modules sets up the router to be used for testing.\r\n * It provides spy implementations of `Location` and `LocationStrategy`.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * beforeEach(() => {\r\n *   TestBed.configureTestingModule({\r\n *     imports: [\r\n *       RouterTestingModule.withRoutes(\r\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\r\n *       )\r\n *     ]\r\n *   });\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\n\n\nclass RouterTestingModule {\n  static withRoutes(routes, config) {\n    return {\n      ngModule: RouterTestingModule,\n      providers: [provideRoutes(routes), {\n        provide: ROUTER_CONFIGURATION,\n        useValue: config ? config : {}\n      }]\n    };\n  }\n\n}\n\nRouterTestingModule.ɵfac = function RouterTestingModule_Factory(t) {\n  return new (t || RouterTestingModule)();\n};\n\nRouterTestingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RouterTestingModule,\n  exports: [RouterModule]\n});\nRouterTestingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ɵROUTER_PROVIDERS, EXTRA_ROUTER_TESTING_PROVIDERS, {\n    provide: Location,\n    useClass: SpyLocation\n  }, {\n    provide: LocationStrategy,\n    useClass: MockLocationStrategy\n  }, {\n    provide: Router,\n    useFactory: setupTestingRouter,\n    deps: [UrlSerializer, ChildrenOutletContexts, Location, Compiler, Injector, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]]\n  }, {\n    provide: PreloadingStrategy,\n    useExisting: NoPreloading\n  }, provideRoutes([])],\n  imports: [RouterModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RouterTestingModule, [{\n    type: NgModule,\n    args: [{\n      exports: [RouterModule],\n      providers: [ɵROUTER_PROVIDERS, EXTRA_ROUTER_TESTING_PROVIDERS, {\n        provide: Location,\n        useClass: SpyLocation\n      }, {\n        provide: LocationStrategy,\n        useClass: MockLocationStrategy\n      }, {\n        provide: Router,\n        useFactory: setupTestingRouter,\n        deps: [UrlSerializer, ChildrenOutletContexts, Location, Compiler, Injector, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]]\n      }, {\n        provide: PreloadingStrategy,\n        useExisting: NoPreloading\n      }, provideRoutes([])]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// This file exists for easily patching SpyNgModuleFactoryLoader in g3\n\n\nvar spy_ng_module_factory_loader = {};\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { RouterTestingModule, setupTestingRouter };","map":{"version":3,"sources":["D:/Documents/GitHub/Angular-API/API-REST/frontend/node_modules/@angular/router/fesm2020/testing.mjs"],"names":["Location","LocationStrategy","SpyLocation","MockLocationStrategy","i0","Compiler","Injector","Optional","NgModule","Router","ɵflatten","ɵassignExtraOptionsToRouter","provideRoutes","ROUTER_CONFIGURATION","RouterModule","ɵROUTER_PROVIDERS","UrlSerializer","ChildrenOutletContexts","ROUTES","UrlHandlingStrategy","RouteReuseStrategy","PreloadingStrategy","NoPreloading","EXTRA_ROUTER_TESTING_PROVIDERS","isUrlHandlingStrategy","opts","setupTestingRouter","urlSerializer","contexts","location","compiler","injector","routes","urlHandlingStrategy","routeReuseStrategy","router","RouterTestingModule","withRoutes","config","ngModule","providers","provide","useValue","ɵfac","ɵmod","ɵinj","useClass","useFactory","deps","useExisting","type","args","exports","spy_ng_module_factory_loader"],"mappings":"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","sourcesContent":["/**\r\n * @license Angular v13.0.3\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { Location, LocationStrategy } from '@angular/common';\r\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\r\nimport * as i0 from '@angular/core';\r\nimport { Compiler, Injector, Optional, NgModule } from '@angular/core';\r\nimport { Router, ɵflatten, ɵassignExtraOptionsToRouter, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, UrlHandlingStrategy, RouteReuseStrategy, PreloadingStrategy, NoPreloading } from '@angular/router';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file exists to easily patch the SpyNgModuleFactoryLoader into g3\r\nconst EXTRA_ROUTER_TESTING_PROVIDERS = [];\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction isUrlHandlingStrategy(opts) {\r\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\r\n    // runtime.\r\n    return 'shouldProcessUrl' in opts;\r\n}\r\n/**\r\n * Router setup factory function used for testing.\r\n *\r\n * @publicApi\r\n */\r\nfunction setupTestingRouter(urlSerializer, contexts, location, compiler, injector, routes, opts, urlHandlingStrategy, routeReuseStrategy) {\r\n    const router = new Router(null, urlSerializer, contexts, location, injector, compiler, ɵflatten(routes));\r\n    if (opts) {\r\n        // Handle deprecated argument ordering.\r\n        if (isUrlHandlingStrategy(opts)) {\r\n            router.urlHandlingStrategy = opts;\r\n        }\r\n        else {\r\n            // Handle ExtraOptions\r\n            ɵassignExtraOptionsToRouter(opts, router);\r\n        }\r\n    }\r\n    if (urlHandlingStrategy) {\r\n        router.urlHandlingStrategy = urlHandlingStrategy;\r\n    }\r\n    if (routeReuseStrategy) {\r\n        router.routeReuseStrategy = routeReuseStrategy;\r\n    }\r\n    return router;\r\n}\r\n/**\r\n * @description\r\n *\r\n * Sets up the router to be used for testing.\r\n *\r\n * The modules sets up the router to be used for testing.\r\n * It provides spy implementations of `Location` and `LocationStrategy`.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * beforeEach(() => {\r\n *   TestBed.configureTestingModule({\r\n *     imports: [\r\n *       RouterTestingModule.withRoutes(\r\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\r\n *       )\r\n *     ]\r\n *   });\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass RouterTestingModule {\r\n    static withRoutes(routes, config) {\r\n        return {\r\n            ngModule: RouterTestingModule,\r\n            providers: [\r\n                provideRoutes(routes),\r\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\r\n            ]\r\n        };\r\n    }\r\n}\r\nRouterTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: RouterTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nRouterTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: RouterTestingModule, exports: [RouterModule] });\r\nRouterTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: RouterTestingModule, providers: [\r\n        ɵROUTER_PROVIDERS,\r\n        EXTRA_ROUTER_TESTING_PROVIDERS,\r\n        { provide: Location, useClass: SpyLocation },\r\n        { provide: LocationStrategy, useClass: MockLocationStrategy },\r\n        {\r\n            provide: Router,\r\n            useFactory: setupTestingRouter,\r\n            deps: [\r\n                UrlSerializer, ChildrenOutletContexts, Location, Compiler, Injector, ROUTES,\r\n                ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],\r\n                [RouteReuseStrategy, new Optional()]\r\n            ]\r\n        },\r\n        { provide: PreloadingStrategy, useExisting: NoPreloading },\r\n        provideRoutes([]),\r\n    ], imports: [RouterModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: RouterTestingModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    exports: [RouterModule],\r\n                    providers: [\r\n                        ɵROUTER_PROVIDERS,\r\n                        EXTRA_ROUTER_TESTING_PROVIDERS,\r\n                        { provide: Location, useClass: SpyLocation },\r\n                        { provide: LocationStrategy, useClass: MockLocationStrategy },\r\n                        {\r\n                            provide: Router,\r\n                            useFactory: setupTestingRouter,\r\n                            deps: [\r\n                                UrlSerializer, ChildrenOutletContexts, Location, Compiler, Injector, ROUTES,\r\n                                ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],\r\n                                [RouteReuseStrategy, new Optional()]\r\n                            ]\r\n                        },\r\n                        { provide: PreloadingStrategy, useExisting: NoPreloading },\r\n                        provideRoutes([]),\r\n                    ]\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file exists for easily patching SpyNgModuleFactoryLoader in g3\r\nvar spy_ng_module_factory_loader = {};\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { RouterTestingModule, setupTestingRouter };\r\n\n"]},"metadata":{},"sourceType":"module"}