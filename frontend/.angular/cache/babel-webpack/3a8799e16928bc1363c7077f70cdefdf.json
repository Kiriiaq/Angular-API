{"ast":null,"code":"/**\r\n * @license Angular v13.0.3\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nimport { LocationStrategy } from '@angular/common';\nimport { Subject } from 'rxjs';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Joins two parts of a URL with a slash if needed.\r\n *\r\n * @param start  URL string\r\n * @param end    URL string\r\n *\r\n *\r\n * @returns The joined URL string.\r\n */\n\nfunction joinWithSlash(start, end) {\n  if (start.length == 0) {\n    return end;\n  }\n\n  if (end.length == 0) {\n    return start;\n  }\n\n  let slashes = 0;\n\n  if (start.endsWith('/')) {\n    slashes++;\n  }\n\n  if (end.startsWith('/')) {\n    slashes++;\n  }\n\n  if (slashes == 2) {\n    return start + end.substring(1);\n  }\n\n  if (slashes == 1) {\n    return start + end;\n  }\n\n  return start + '/' + end;\n}\n/**\r\n * Removes a trailing slash from a URL string if needed.\r\n * Looks for the first occurrence of either `#`, `?`, or the end of the\r\n * line as `/` characters and removes the trailing slash if one exists.\r\n *\r\n * @param url URL string.\r\n *\r\n * @returns The URL string, modified if needed.\r\n */\n\n\nfunction stripTrailingSlash(url) {\n  const match = url.match(/#|\\?|$/);\n  const pathEndIdx = match && match.index || url.length;\n  const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n  return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n}\n/**\r\n * Normalizes URL parameters by prepending with `?` if needed.\r\n *\r\n * @param  params String of URL parameters.\r\n *\r\n * @returns The normalized URL parameters string.\r\n */\n\n\nfunction normalizeQueryParams(params) {\n  return params && params[0] !== '?' ? '?' + params : params;\n}\n/**\r\n * A spy for {@link Location} that allows tests to fire simulated location events.\r\n *\r\n * @publicApi\r\n */\n\n\nclass SpyLocation {\n  constructor() {\n    this.urlChanges = [];\n    this._history = [new LocationState('', '', null)];\n    this._historyIndex = 0;\n    /** @internal */\n\n    this._subject = new EventEmitter();\n    /** @internal */\n\n    this._baseHref = '';\n    /** @internal */\n\n    this._platformStrategy = null;\n    /** @internal */\n\n    this._platformLocation = null;\n    /** @internal */\n\n    this._urlChangeListeners = [];\n  }\n\n  setInitialPath(url) {\n    this._history[this._historyIndex].path = url;\n  }\n\n  setBaseHref(url) {\n    this._baseHref = url;\n  }\n\n  path() {\n    return this._history[this._historyIndex].path;\n  }\n\n  getState() {\n    return this._history[this._historyIndex].state;\n  }\n\n  isCurrentPathEqualTo(path, query = '') {\n    const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n    const currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n    return currPath == givenPath + (query.length > 0 ? '?' + query : '');\n  }\n\n  simulateUrlPop(pathname) {\n    this._subject.emit({\n      'url': pathname,\n      'pop': true,\n      'type': 'popstate'\n    });\n  }\n\n  simulateHashChange(pathname) {\n    const path = this.prepareExternalUrl(pathname);\n    this.pushHistory(path, '', null);\n    this.urlChanges.push('hash: ' + pathname); // the browser will automatically fire popstate event before each `hashchange` event, so we need\n    // to simulate it.\n\n    this._subject.emit({\n      'url': pathname,\n      'pop': true,\n      'type': 'popstate'\n    });\n\n    this._subject.emit({\n      'url': pathname,\n      'pop': true,\n      'type': 'hashchange'\n    });\n  }\n\n  prepareExternalUrl(url) {\n    if (url.length > 0 && !url.startsWith('/')) {\n      url = '/' + url;\n    }\n\n    return this._baseHref + url;\n  }\n\n  go(path, query = '', state = null) {\n    path = this.prepareExternalUrl(path);\n    this.pushHistory(path, query, state);\n    const locationState = this._history[this._historyIndex - 1];\n\n    if (locationState.path == path && locationState.query == query) {\n      return;\n    }\n\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push(url);\n\n    this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\n  }\n\n  replaceState(path, query = '', state = null) {\n    path = this.prepareExternalUrl(path);\n    const history = this._history[this._historyIndex];\n\n    if (history.path == path && history.query == query) {\n      return;\n    }\n\n    history.path = path;\n    history.query = query;\n    history.state = state;\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push('replace: ' + url);\n\n    this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\n  }\n\n  forward() {\n    if (this._historyIndex < this._history.length - 1) {\n      this._historyIndex++;\n\n      this._subject.emit({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }\n\n  back() {\n    if (this._historyIndex > 0) {\n      this._historyIndex--;\n\n      this._subject.emit({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }\n\n  historyGo(relativePosition = 0) {\n    const nextPageIndex = this._historyIndex + relativePosition;\n\n    if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {\n      this._historyIndex = nextPageIndex;\n\n      this._subject.emit({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }\n\n  onUrlChange(fn) {\n    this._urlChangeListeners.push(fn);\n\n    if (!this._urlChangeSubscription) {\n      this._urlChangeSubscription = this.subscribe(v => {\n        this._notifyUrlChangeListeners(v.url, v.state);\n      });\n    }\n  }\n  /** @internal */\n\n\n  _notifyUrlChangeListeners(url = '', state) {\n    this._urlChangeListeners.forEach(fn => fn(url, state));\n  }\n\n  subscribe(onNext, onThrow, onReturn) {\n    return this._subject.subscribe({\n      next: onNext,\n      error: onThrow,\n      complete: onReturn\n    });\n  }\n\n  normalize(url) {\n    return null;\n  }\n\n  pushHistory(path, query, state) {\n    if (this._historyIndex > 0) {\n      this._history.splice(this._historyIndex + 1);\n    }\n\n    this._history.push(new LocationState(path, query, state));\n\n    this._historyIndex = this._history.length - 1;\n  }\n\n}\n\nSpyLocation.ɵfac = function SpyLocation_Factory(t) {\n  return new (t || SpyLocation)();\n};\n\nSpyLocation.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SpyLocation,\n  factory: SpyLocation.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SpyLocation, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass LocationState {\n  constructor(path, query, state) {\n    this.path = path;\n    this.query = query;\n    this.state = state;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\r\n * location events.\r\n *\r\n * @publicApi\r\n */\n\n\nclass MockLocationStrategy extends LocationStrategy {\n  constructor() {\n    super();\n    this.internalBaseHref = '/';\n    this.internalPath = '/';\n    this.internalTitle = '';\n    this.urlChanges = [];\n    /** @internal */\n\n    this._subject = new EventEmitter();\n    this.stateChanges = [];\n  }\n\n  simulatePopState(url) {\n    this.internalPath = url;\n\n    this._subject.emit(new _MockPopStateEvent(this.path()));\n  }\n\n  path(includeHash = false) {\n    return this.internalPath;\n  }\n\n  prepareExternalUrl(internal) {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n\n    return this.internalBaseHref + internal;\n  }\n\n  pushState(ctx, title, path, query) {\n    // Add state change to changes array\n    this.stateChanges.push(ctx);\n    this.internalTitle = title;\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n\n  replaceState(ctx, title, path, query) {\n    // Reset the last index of stateChanges to the ctx (state) object\n    this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n    this.internalTitle = title;\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n\n  onPopState(fn) {\n    this._subject.subscribe({\n      next: fn\n    });\n  }\n\n  getBaseHref() {\n    return this.internalBaseHref;\n  }\n\n  back() {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      this.stateChanges.pop();\n      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n\n  forward() {\n    throw 'not implemented';\n  }\n\n  getState() {\n    return this.stateChanges[(this.stateChanges.length || 1) - 1];\n  }\n\n}\n\nMockLocationStrategy.ɵfac = function MockLocationStrategy_Factory(t) {\n  return new (t || MockLocationStrategy)();\n};\n\nMockLocationStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MockLocationStrategy,\n  factory: MockLocationStrategy.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockLocationStrategy, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass _MockPopStateEvent {\n  constructor(newUrl) {\n    this.newUrl = newUrl;\n    this.pop = true;\n    this.type = 'popstate';\n  }\n\n}\n/**\r\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\r\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\r\n *  12            3  4          5       6  7        8 9\r\n *\r\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\r\n *\r\n * Results in:\r\n *\r\n * $1 = http:\r\n * $2 = http\r\n * $3 = //www.ics.uci.edu\r\n * $4 = www.ics.uci.edu\r\n * $5 = /pub/ietf/uri/\r\n * $6 = <undefined>\r\n * $7 = <undefined>\r\n * $8 = #Related\r\n * $9 = Related\r\n */\n\n\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\nfunction parseUrl(urlStr, baseHref) {\n  const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n  let serverBase; // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n  // an arbitrary base URL which can be removed afterward.\n\n  if (!verifyProtocol.test(urlStr)) {\n    serverBase = 'http://empty.com/';\n  }\n\n  let parsedUrl;\n\n  try {\n    parsedUrl = new URL(urlStr, serverBase);\n  } catch (e) {\n    const result = urlParse.exec(serverBase || '' + urlStr);\n\n    if (!result) {\n      throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n    }\n\n    const hostSplit = result[4].split(':');\n    parsedUrl = {\n      protocol: result[1],\n      hostname: hostSplit[0],\n      port: hostSplit[1] || '',\n      pathname: result[5],\n      search: result[6],\n      hash: result[8]\n    };\n  }\n\n  if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n    parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n  }\n\n  return {\n    hostname: !serverBase && parsedUrl.hostname || '',\n    protocol: !serverBase && parsedUrl.protocol || '',\n    port: !serverBase && parsedUrl.port || '',\n    pathname: parsedUrl.pathname || '/',\n    search: parsedUrl.search || '',\n    hash: parsedUrl.hash || ''\n  };\n}\n/**\r\n * Provider for mock platform location config\r\n *\r\n * @publicApi\r\n */\n\n\nconst MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\n/**\r\n * Mock implementation of URL state.\r\n *\r\n * @publicApi\r\n */\n\nclass MockPlatformLocation {\n  constructor(config) {\n    this.baseHref = '';\n    this.hashUpdate = new Subject();\n    this.urlChangeIndex = 0;\n    this.urlChanges = [{\n      hostname: '',\n      protocol: '',\n      port: '',\n      pathname: '/',\n      search: '',\n      hash: '',\n      state: null\n    }];\n\n    if (config) {\n      this.baseHref = config.appBaseHref || '';\n      const parsedChanges = this.parseChanges(null, config.startUrl || 'http://_empty_/', this.baseHref);\n      this.urlChanges[0] = { ...parsedChanges\n      };\n    }\n  }\n\n  get hostname() {\n    return this.urlChanges[this.urlChangeIndex].hostname;\n  }\n\n  get protocol() {\n    return this.urlChanges[this.urlChangeIndex].protocol;\n  }\n\n  get port() {\n    return this.urlChanges[this.urlChangeIndex].port;\n  }\n\n  get pathname() {\n    return this.urlChanges[this.urlChangeIndex].pathname;\n  }\n\n  get search() {\n    return this.urlChanges[this.urlChangeIndex].search;\n  }\n\n  get hash() {\n    return this.urlChanges[this.urlChangeIndex].hash;\n  }\n\n  get state() {\n    return this.urlChanges[this.urlChangeIndex].state;\n  }\n\n  getBaseHrefFromDOM() {\n    return this.baseHref;\n  }\n\n  onPopState(fn) {\n    // No-op: a state stack is not implemented, so\n    // no events will ever come.\n    return () => {};\n  }\n\n  onHashChange(fn) {\n    const subscription = this.hashUpdate.subscribe(fn);\n    return () => subscription.unsubscribe();\n  }\n\n  get href() {\n    let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n    url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n    return url;\n  }\n\n  get url() {\n    return `${this.pathname}${this.search}${this.hash}`;\n  }\n\n  parseChanges(state, url, baseHref = '') {\n    // When the `history.state` value is stored, it is always copied.\n    state = JSON.parse(JSON.stringify(state));\n    return { ...parseUrl(url, baseHref),\n      state\n    };\n  }\n\n  replaceState(state, title, newUrl) {\n    const {\n      pathname,\n      search,\n      state: parsedState,\n      hash\n    } = this.parseChanges(state, newUrl);\n    this.urlChanges[this.urlChangeIndex] = { ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState\n    };\n  }\n\n  pushState(state, title, newUrl) {\n    const {\n      pathname,\n      search,\n      state: parsedState,\n      hash\n    } = this.parseChanges(state, newUrl);\n\n    if (this.urlChangeIndex > 0) {\n      this.urlChanges.splice(this.urlChangeIndex + 1);\n    }\n\n    this.urlChanges.push({ ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState\n    });\n    this.urlChangeIndex = this.urlChanges.length - 1;\n  }\n\n  forward() {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n\n    if (this.urlChangeIndex < this.urlChanges.length) {\n      this.urlChangeIndex++;\n    }\n\n    this.scheduleHashUpdate(oldHash, oldUrl);\n  }\n\n  back() {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n\n    if (this.urlChangeIndex > 0) {\n      this.urlChangeIndex--;\n    }\n\n    this.scheduleHashUpdate(oldHash, oldUrl);\n  }\n\n  historyGo(relativePosition = 0) {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    const nextPageIndex = this.urlChangeIndex + relativePosition;\n\n    if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {\n      this.urlChangeIndex = nextPageIndex;\n    }\n\n    this.scheduleHashUpdate(oldHash, oldUrl);\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  scheduleHashUpdate(oldHash, oldUrl) {\n    if (oldHash !== this.hash) {\n      scheduleMicroTask(() => this.hashUpdate.next({\n        type: 'hashchange',\n        state: null,\n        oldUrl,\n        newUrl: this.url\n      }));\n    }\n  }\n\n}\n\nMockPlatformLocation.ɵfac = function MockPlatformLocation_Factory(t) {\n  return new (t || MockPlatformLocation)(i0.ɵɵinject(MOCK_PLATFORM_LOCATION_CONFIG, 8));\n};\n\nMockPlatformLocation.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MockPlatformLocation,\n  factory: MockPlatformLocation.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockPlatformLocation, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MOCK_PLATFORM_LOCATION_CONFIG]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nfunction scheduleMicroTask(cb) {\n  Promise.resolve(null).then(cb);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation };","map":{"version":3,"sources":["D:/Documents/GitHub/Angular-API/API-REST/frontend/node_modules/@angular/common/fesm2020/testing.mjs"],"names":["i0","EventEmitter","Injectable","InjectionToken","Inject","Optional","LocationStrategy","Subject","joinWithSlash","start","end","length","slashes","endsWith","startsWith","substring","stripTrailingSlash","url","match","pathEndIdx","index","droppedSlashIdx","slice","normalizeQueryParams","params","SpyLocation","constructor","urlChanges","_history","LocationState","_historyIndex","_subject","_baseHref","_platformStrategy","_platformLocation","_urlChangeListeners","setInitialPath","path","setBaseHref","getState","state","isCurrentPathEqualTo","query","givenPath","currPath","simulateUrlPop","pathname","emit","simulateHashChange","prepareExternalUrl","pushHistory","push","go","locationState","_notifyUrlChangeListeners","replaceState","history","forward","back","historyGo","relativePosition","nextPageIndex","onUrlChange","fn","_urlChangeSubscription","subscribe","v","forEach","onNext","onThrow","onReturn","next","error","complete","normalize","splice","ɵfac","ɵprov","type","MockLocationStrategy","internalBaseHref","internalPath","internalTitle","stateChanges","simulatePopState","_MockPopStateEvent","includeHash","internal","pushState","ctx","title","externalUrl","onPopState","getBaseHref","pop","nextUrl","newUrl","urlParse","parseUrl","urlStr","baseHref","verifyProtocol","serverBase","test","parsedUrl","URL","e","result","exec","Error","hostSplit","split","protocol","hostname","port","search","hash","indexOf","MOCK_PLATFORM_LOCATION_CONFIG","MockPlatformLocation","config","hashUpdate","urlChangeIndex","appBaseHref","parsedChanges","parseChanges","startUrl","getBaseHrefFromDOM","onHashChange","subscription","unsubscribe","href","JSON","parse","stringify","parsedState","oldUrl","oldHash","scheduleHashUpdate","scheduleMicroTask","undefined","decorators","args","cb","Promise","resolve","then"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,cAAnC,EAAmDC,MAAnD,EAA2DC,QAA3D,QAA2E,eAA3E;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,GAA9B,EAAmC;AAC/B,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB;AACnB,WAAOD,GAAP;AACH;;AACD,MAAIA,GAAG,CAACC,MAAJ,IAAc,CAAlB,EAAqB;AACjB,WAAOF,KAAP;AACH;;AACD,MAAIG,OAAO,GAAG,CAAd;;AACA,MAAIH,KAAK,CAACI,QAAN,CAAe,GAAf,CAAJ,EAAyB;AACrBD,IAAAA,OAAO;AACV;;AACD,MAAIF,GAAG,CAACI,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AACrBF,IAAAA,OAAO;AACV;;AACD,MAAIA,OAAO,IAAI,CAAf,EAAkB;AACd,WAAOH,KAAK,GAAGC,GAAG,CAACK,SAAJ,CAAc,CAAd,CAAf;AACH;;AACD,MAAIH,OAAO,IAAI,CAAf,EAAkB;AACd,WAAOH,KAAK,GAAGC,GAAf;AACH;;AACD,SAAOD,KAAK,GAAG,GAAR,GAAcC,GAArB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,kBAAT,CAA4BC,GAA5B,EAAiC;AAC7B,QAAMC,KAAK,GAAGD,GAAG,CAACC,KAAJ,CAAU,QAAV,CAAd;AACA,QAAMC,UAAU,GAAGD,KAAK,IAAIA,KAAK,CAACE,KAAf,IAAwBH,GAAG,CAACN,MAA/C;AACA,QAAMU,eAAe,GAAGF,UAAU,IAAIF,GAAG,CAACE,UAAU,GAAG,CAAd,CAAH,KAAwB,GAAxB,GAA8B,CAA9B,GAAkC,CAAtC,CAAlC;AACA,SAAOF,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAaD,eAAb,IAAgCJ,GAAG,CAACK,KAAJ,CAAUH,UAAV,CAAvC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,oBAAT,CAA8BC,MAA9B,EAAsC;AAClC,SAAOA,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,KAAc,GAAxB,GAA8B,MAAMA,MAApC,GAA6CA,MAApD;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,MAAMC,WAAN,CAAkB;AACdC,EAAAA,WAAW,GAAG;AACV,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,QAAL,GAAgB,CAAC,IAAIC,aAAJ,CAAkB,EAAlB,EAAsB,EAAtB,EAA0B,IAA1B,CAAD,CAAhB;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA;;AACA,SAAKC,QAAL,GAAgB,IAAI9B,YAAJ,EAAhB;AACA;;AACA,SAAK+B,SAAL,GAAiB,EAAjB;AACA;;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA;;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA;;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACH;;AACDC,EAAAA,cAAc,CAACnB,GAAD,EAAM;AAChB,SAAKW,QAAL,CAAc,KAAKE,aAAnB,EAAkCO,IAAlC,GAAyCpB,GAAzC;AACH;;AACDqB,EAAAA,WAAW,CAACrB,GAAD,EAAM;AACb,SAAKe,SAAL,GAAiBf,GAAjB;AACH;;AACDoB,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKT,QAAL,CAAc,KAAKE,aAAnB,EAAkCO,IAAzC;AACH;;AACDE,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKX,QAAL,CAAc,KAAKE,aAAnB,EAAkCU,KAAzC;AACH;;AACDC,EAAAA,oBAAoB,CAACJ,IAAD,EAAOK,KAAK,GAAG,EAAf,EAAmB;AACnC,UAAMC,SAAS,GAAGN,IAAI,CAACxB,QAAL,CAAc,GAAd,IAAqBwB,IAAI,CAACtB,SAAL,CAAe,CAAf,EAAkBsB,IAAI,CAAC1B,MAAL,GAAc,CAAhC,CAArB,GAA0D0B,IAA5E;AACA,UAAMO,QAAQ,GAAG,KAAKP,IAAL,GAAYxB,QAAZ,CAAqB,GAArB,IAA4B,KAAKwB,IAAL,GAAYtB,SAAZ,CAAsB,CAAtB,EAAyB,KAAKsB,IAAL,GAAY1B,MAAZ,GAAqB,CAA9C,CAA5B,GAA+E,KAAK0B,IAAL,EAAhG;AACA,WAAOO,QAAQ,IAAID,SAAS,IAAID,KAAK,CAAC/B,MAAN,GAAe,CAAf,GAAoB,MAAM+B,KAA1B,GAAmC,EAAvC,CAA5B;AACH;;AACDG,EAAAA,cAAc,CAACC,QAAD,EAAW;AACrB,SAAKf,QAAL,CAAcgB,IAAd,CAAmB;AAAE,aAAOD,QAAT;AAAmB,aAAO,IAA1B;AAAgC,cAAQ;AAAxC,KAAnB;AACH;;AACDE,EAAAA,kBAAkB,CAACF,QAAD,EAAW;AACzB,UAAMT,IAAI,GAAG,KAAKY,kBAAL,CAAwBH,QAAxB,CAAb;AACA,SAAKI,WAAL,CAAiBb,IAAjB,EAAuB,EAAvB,EAA2B,IAA3B;AACA,SAAKV,UAAL,CAAgBwB,IAAhB,CAAqB,WAAWL,QAAhC,EAHyB,CAIzB;AACA;;AACA,SAAKf,QAAL,CAAcgB,IAAd,CAAmB;AAAE,aAAOD,QAAT;AAAmB,aAAO,IAA1B;AAAgC,cAAQ;AAAxC,KAAnB;;AACA,SAAKf,QAAL,CAAcgB,IAAd,CAAmB;AAAE,aAAOD,QAAT;AAAmB,aAAO,IAA1B;AAAgC,cAAQ;AAAxC,KAAnB;AACH;;AACDG,EAAAA,kBAAkB,CAAChC,GAAD,EAAM;AACpB,QAAIA,GAAG,CAACN,MAAJ,GAAa,CAAb,IAAkB,CAACM,GAAG,CAACH,UAAJ,CAAe,GAAf,CAAvB,EAA4C;AACxCG,MAAAA,GAAG,GAAG,MAAMA,GAAZ;AACH;;AACD,WAAO,KAAKe,SAAL,GAAiBf,GAAxB;AACH;;AACDmC,EAAAA,EAAE,CAACf,IAAD,EAAOK,KAAK,GAAG,EAAf,EAAmBF,KAAK,GAAG,IAA3B,EAAiC;AAC/BH,IAAAA,IAAI,GAAG,KAAKY,kBAAL,CAAwBZ,IAAxB,CAAP;AACA,SAAKa,WAAL,CAAiBb,IAAjB,EAAuBK,KAAvB,EAA8BF,KAA9B;AACA,UAAMa,aAAa,GAAG,KAAKzB,QAAL,CAAc,KAAKE,aAAL,GAAqB,CAAnC,CAAtB;;AACA,QAAIuB,aAAa,CAAChB,IAAd,IAAsBA,IAAtB,IAA8BgB,aAAa,CAACX,KAAd,IAAuBA,KAAzD,EAAgE;AAC5D;AACH;;AACD,UAAMzB,GAAG,GAAGoB,IAAI,IAAIK,KAAK,CAAC/B,MAAN,GAAe,CAAf,GAAoB,MAAM+B,KAA1B,GAAmC,EAAvC,CAAhB;AACA,SAAKf,UAAL,CAAgBwB,IAAhB,CAAqBlC,GAArB;;AACA,SAAKqC,yBAAL,CAA+BjB,IAAI,GAAGd,oBAAoB,CAACmB,KAAD,CAA1D,EAAmEF,KAAnE;AACH;;AACDe,EAAAA,YAAY,CAAClB,IAAD,EAAOK,KAAK,GAAG,EAAf,EAAmBF,KAAK,GAAG,IAA3B,EAAiC;AACzCH,IAAAA,IAAI,GAAG,KAAKY,kBAAL,CAAwBZ,IAAxB,CAAP;AACA,UAAMmB,OAAO,GAAG,KAAK5B,QAAL,CAAc,KAAKE,aAAnB,CAAhB;;AACA,QAAI0B,OAAO,CAACnB,IAAR,IAAgBA,IAAhB,IAAwBmB,OAAO,CAACd,KAAR,IAAiBA,KAA7C,EAAoD;AAChD;AACH;;AACDc,IAAAA,OAAO,CAACnB,IAAR,GAAeA,IAAf;AACAmB,IAAAA,OAAO,CAACd,KAAR,GAAgBA,KAAhB;AACAc,IAAAA,OAAO,CAAChB,KAAR,GAAgBA,KAAhB;AACA,UAAMvB,GAAG,GAAGoB,IAAI,IAAIK,KAAK,CAAC/B,MAAN,GAAe,CAAf,GAAoB,MAAM+B,KAA1B,GAAmC,EAAvC,CAAhB;AACA,SAAKf,UAAL,CAAgBwB,IAAhB,CAAqB,cAAclC,GAAnC;;AACA,SAAKqC,yBAAL,CAA+BjB,IAAI,GAAGd,oBAAoB,CAACmB,KAAD,CAA1D,EAAmEF,KAAnE;AACH;;AACDiB,EAAAA,OAAO,GAAG;AACN,QAAI,KAAK3B,aAAL,GAAsB,KAAKF,QAAL,CAAcjB,MAAd,GAAuB,CAAjD,EAAqD;AACjD,WAAKmB,aAAL;;AACA,WAAKC,QAAL,CAAcgB,IAAd,CAAmB;AAAE,eAAO,KAAKV,IAAL,EAAT;AAAsB,iBAAS,KAAKE,QAAL,EAA/B;AAAgD,eAAO,IAAvD;AAA6D,gBAAQ;AAArE,OAAnB;AACH;AACJ;;AACDmB,EAAAA,IAAI,GAAG;AACH,QAAI,KAAK5B,aAAL,GAAqB,CAAzB,EAA4B;AACxB,WAAKA,aAAL;;AACA,WAAKC,QAAL,CAAcgB,IAAd,CAAmB;AAAE,eAAO,KAAKV,IAAL,EAAT;AAAsB,iBAAS,KAAKE,QAAL,EAA/B;AAAgD,eAAO,IAAvD;AAA6D,gBAAQ;AAArE,OAAnB;AACH;AACJ;;AACDoB,EAAAA,SAAS,CAACC,gBAAgB,GAAG,CAApB,EAAuB;AAC5B,UAAMC,aAAa,GAAG,KAAK/B,aAAL,GAAqB8B,gBAA3C;;AACA,QAAIC,aAAa,IAAI,CAAjB,IAAsBA,aAAa,GAAG,KAAKjC,QAAL,CAAcjB,MAAxD,EAAgE;AAC5D,WAAKmB,aAAL,GAAqB+B,aAArB;;AACA,WAAK9B,QAAL,CAAcgB,IAAd,CAAmB;AAAE,eAAO,KAAKV,IAAL,EAAT;AAAsB,iBAAS,KAAKE,QAAL,EAA/B;AAAgD,eAAO,IAAvD;AAA6D,gBAAQ;AAArE,OAAnB;AACH;AACJ;;AACDuB,EAAAA,WAAW,CAACC,EAAD,EAAK;AACZ,SAAK5B,mBAAL,CAAyBgB,IAAzB,CAA8BY,EAA9B;;AACA,QAAI,CAAC,KAAKC,sBAAV,EAAkC;AAC9B,WAAKA,sBAAL,GAA8B,KAAKC,SAAL,CAAeC,CAAC,IAAI;AAC9C,aAAKZ,yBAAL,CAA+BY,CAAC,CAACjD,GAAjC,EAAsCiD,CAAC,CAAC1B,KAAxC;AACH,OAF6B,CAA9B;AAGH;AACJ;AACD;;;AACAc,EAAAA,yBAAyB,CAACrC,GAAG,GAAG,EAAP,EAAWuB,KAAX,EAAkB;AACvC,SAAKL,mBAAL,CAAyBgC,OAAzB,CAAiCJ,EAAE,IAAIA,EAAE,CAAC9C,GAAD,EAAMuB,KAAN,CAAzC;AACH;;AACDyB,EAAAA,SAAS,CAACG,MAAD,EAASC,OAAT,EAAkBC,QAAlB,EAA4B;AACjC,WAAO,KAAKvC,QAAL,CAAckC,SAAd,CAAwB;AAAEM,MAAAA,IAAI,EAAEH,MAAR;AAAgBI,MAAAA,KAAK,EAAEH,OAAvB;AAAgCI,MAAAA,QAAQ,EAAEH;AAA1C,KAAxB,CAAP;AACH;;AACDI,EAAAA,SAAS,CAACzD,GAAD,EAAM;AACX,WAAO,IAAP;AACH;;AACDiC,EAAAA,WAAW,CAACb,IAAD,EAAOK,KAAP,EAAcF,KAAd,EAAqB;AAC5B,QAAI,KAAKV,aAAL,GAAqB,CAAzB,EAA4B;AACxB,WAAKF,QAAL,CAAc+C,MAAd,CAAqB,KAAK7C,aAAL,GAAqB,CAA1C;AACH;;AACD,SAAKF,QAAL,CAAcuB,IAAd,CAAmB,IAAItB,aAAJ,CAAkBQ,IAAlB,EAAwBK,KAAxB,EAA+BF,KAA/B,CAAnB;;AACA,SAAKV,aAAL,GAAqB,KAAKF,QAAL,CAAcjB,MAAd,GAAuB,CAA5C;AACH;;AAtHa;;AAwHlBc,WAAW,CAACmD,IAAZ;AAAA,mBAAwGnD,WAAxG;AAAA;;AACAA,WAAW,CAACoD,KAAZ,kBAD8F7E,EAC9F;AAAA,SAA4GyB,WAA5G;AAAA,WAA4GA,WAA5G;AAAA;;AACA;AAAA,qDAF8FzB,EAE9F,mBAA2FyB,WAA3F,EAAoH,CAAC;AACzGqD,IAAAA,IAAI,EAAE5E;AADmG,GAAD,CAApH;AAAA;;AAGA,MAAM2B,aAAN,CAAoB;AAChBH,EAAAA,WAAW,CAACW,IAAD,EAAOK,KAAP,EAAcF,KAAd,EAAqB;AAC5B,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKK,KAAL,GAAaA,KAAb;AACA,SAAKF,KAAL,GAAaA,KAAb;AACH;;AALe;AAQpB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMuC,oBAAN,SAAmCzE,gBAAnC,CAAoD;AAChDoB,EAAAA,WAAW,GAAG;AACV;AACA,SAAKsD,gBAAL,GAAwB,GAAxB;AACA,SAAKC,YAAL,GAAoB,GAApB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKvD,UAAL,GAAkB,EAAlB;AACA;;AACA,SAAKI,QAAL,GAAgB,IAAI9B,YAAJ,EAAhB;AACA,SAAKkF,YAAL,GAAoB,EAApB;AACH;;AACDC,EAAAA,gBAAgB,CAACnE,GAAD,EAAM;AAClB,SAAKgE,YAAL,GAAoBhE,GAApB;;AACA,SAAKc,QAAL,CAAcgB,IAAd,CAAmB,IAAIsC,kBAAJ,CAAuB,KAAKhD,IAAL,EAAvB,CAAnB;AACH;;AACDA,EAAAA,IAAI,CAACiD,WAAW,GAAG,KAAf,EAAsB;AACtB,WAAO,KAAKL,YAAZ;AACH;;AACDhC,EAAAA,kBAAkB,CAACsC,QAAD,EAAW;AACzB,QAAIA,QAAQ,CAACzE,UAAT,CAAoB,GAApB,KAA4B,KAAKkE,gBAAL,CAAsBnE,QAAtB,CAA+B,GAA/B,CAAhC,EAAqE;AACjE,aAAO,KAAKmE,gBAAL,GAAwBO,QAAQ,CAACxE,SAAT,CAAmB,CAAnB,CAA/B;AACH;;AACD,WAAO,KAAKiE,gBAAL,GAAwBO,QAA/B;AACH;;AACDC,EAAAA,SAAS,CAACC,GAAD,EAAMC,KAAN,EAAarD,IAAb,EAAmBK,KAAnB,EAA0B;AAC/B;AACA,SAAKyC,YAAL,CAAkBhC,IAAlB,CAAuBsC,GAAvB;AACA,SAAKP,aAAL,GAAqBQ,KAArB;AACA,UAAMzE,GAAG,GAAGoB,IAAI,IAAIK,KAAK,CAAC/B,MAAN,GAAe,CAAf,GAAoB,MAAM+B,KAA1B,GAAmC,EAAvC,CAAhB;AACA,SAAKuC,YAAL,GAAoBhE,GAApB;AACA,UAAM0E,WAAW,GAAG,KAAK1C,kBAAL,CAAwBhC,GAAxB,CAApB;AACA,SAAKU,UAAL,CAAgBwB,IAAhB,CAAqBwC,WAArB;AACH;;AACDpC,EAAAA,YAAY,CAACkC,GAAD,EAAMC,KAAN,EAAarD,IAAb,EAAmBK,KAAnB,EAA0B;AAClC;AACA,SAAKyC,YAAL,CAAkB,CAAC,KAAKA,YAAL,CAAkBxE,MAAlB,IAA4B,CAA7B,IAAkC,CAApD,IAAyD8E,GAAzD;AACA,SAAKP,aAAL,GAAqBQ,KAArB;AACA,UAAMzE,GAAG,GAAGoB,IAAI,IAAIK,KAAK,CAAC/B,MAAN,GAAe,CAAf,GAAoB,MAAM+B,KAA1B,GAAmC,EAAvC,CAAhB;AACA,SAAKuC,YAAL,GAAoBhE,GAApB;AACA,UAAM0E,WAAW,GAAG,KAAK1C,kBAAL,CAAwBhC,GAAxB,CAApB;AACA,SAAKU,UAAL,CAAgBwB,IAAhB,CAAqB,cAAcwC,WAAnC;AACH;;AACDC,EAAAA,UAAU,CAAC7B,EAAD,EAAK;AACX,SAAKhC,QAAL,CAAckC,SAAd,CAAwB;AAAEM,MAAAA,IAAI,EAAER;AAAR,KAAxB;AACH;;AACD8B,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKb,gBAAZ;AACH;;AACDtB,EAAAA,IAAI,GAAG;AACH,QAAI,KAAK/B,UAAL,CAAgBhB,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,WAAKgB,UAAL,CAAgBmE,GAAhB;AACA,WAAKX,YAAL,CAAkBW,GAAlB;AACA,YAAMC,OAAO,GAAG,KAAKpE,UAAL,CAAgBhB,MAAhB,GAAyB,CAAzB,GAA6B,KAAKgB,UAAL,CAAgB,KAAKA,UAAL,CAAgBhB,MAAhB,GAAyB,CAAzC,CAA7B,GAA2E,EAA3F;AACA,WAAKyE,gBAAL,CAAsBW,OAAtB;AACH;AACJ;;AACDtC,EAAAA,OAAO,GAAG;AACN,UAAM,iBAAN;AACH;;AACDlB,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAK4C,YAAL,CAAkB,CAAC,KAAKA,YAAL,CAAkBxE,MAAlB,IAA4B,CAA7B,IAAkC,CAApD,CAAP;AACH;;AA7D+C;;AA+DpDoE,oBAAoB,CAACH,IAArB;AAAA,mBAAiHG,oBAAjH;AAAA;;AACAA,oBAAoB,CAACF,KAArB,kBA1F8F7E,EA0F9F;AAAA,SAAqH+E,oBAArH;AAAA,WAAqHA,oBAArH;AAAA;;AACA;AAAA,qDA3F8F/E,EA2F9F,mBAA2F+E,oBAA3F,EAA6H,CAAC;AAClHD,IAAAA,IAAI,EAAE5E;AAD4G,GAAD,CAA7H,EAE4B,YAAY;AAAE,WAAO,EAAP;AAAY,GAFtD;AAAA;;AAGA,MAAMmF,kBAAN,CAAyB;AACrB3D,EAAAA,WAAW,CAACsE,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKF,GAAL,GAAW,IAAX;AACA,SAAKhB,IAAL,GAAY,UAAZ;AACH;;AALoB;AAQzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMmB,QAAQ,GAAG,+DAAjB;;AACA,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,QAA1B,EAAoC;AAChC,QAAMC,cAAc,GAAG,wBAAvB;AACA,MAAIC,UAAJ,CAFgC,CAGhC;AACA;;AACA,MAAI,CAACD,cAAc,CAACE,IAAf,CAAoBJ,MAApB,CAAL,EAAkC;AAC9BG,IAAAA,UAAU,GAAG,mBAAb;AACH;;AACD,MAAIE,SAAJ;;AACA,MAAI;AACAA,IAAAA,SAAS,GAAG,IAAIC,GAAJ,CAAQN,MAAR,EAAgBG,UAAhB,CAAZ;AACH,GAFD,CAGA,OAAOI,CAAP,EAAU;AACN,UAAMC,MAAM,GAAGV,QAAQ,CAACW,IAAT,CAAcN,UAAU,IAAI,KAAKH,MAAjC,CAAf;;AACA,QAAI,CAACQ,MAAL,EAAa;AACT,YAAM,IAAIE,KAAJ,CAAW,gBAAeV,MAAO,eAAcC,QAAS,EAAxD,CAAN;AACH;;AACD,UAAMU,SAAS,GAAGH,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAV,CAAgB,GAAhB,CAAlB;AACAP,IAAAA,SAAS,GAAG;AACRQ,MAAAA,QAAQ,EAAEL,MAAM,CAAC,CAAD,CADR;AAERM,MAAAA,QAAQ,EAAEH,SAAS,CAAC,CAAD,CAFX;AAGRI,MAAAA,IAAI,EAAEJ,SAAS,CAAC,CAAD,CAAT,IAAgB,EAHd;AAIRhE,MAAAA,QAAQ,EAAE6D,MAAM,CAAC,CAAD,CAJR;AAKRQ,MAAAA,MAAM,EAAER,MAAM,CAAC,CAAD,CALN;AAMRS,MAAAA,IAAI,EAAET,MAAM,CAAC,CAAD;AANJ,KAAZ;AAQH;;AACD,MAAIH,SAAS,CAAC1D,QAAV,IAAsB0D,SAAS,CAAC1D,QAAV,CAAmBuE,OAAnB,CAA2BjB,QAA3B,MAAyC,CAAnE,EAAsE;AAClEI,IAAAA,SAAS,CAAC1D,QAAV,GAAqB0D,SAAS,CAAC1D,QAAV,CAAmB/B,SAAnB,CAA6BqF,QAAQ,CAACzF,MAAtC,CAArB;AACH;;AACD,SAAO;AACHsG,IAAAA,QAAQ,EAAE,CAACX,UAAD,IAAeE,SAAS,CAACS,QAAzB,IAAqC,EAD5C;AAEHD,IAAAA,QAAQ,EAAE,CAACV,UAAD,IAAeE,SAAS,CAACQ,QAAzB,IAAqC,EAF5C;AAGHE,IAAAA,IAAI,EAAE,CAACZ,UAAD,IAAeE,SAAS,CAACU,IAAzB,IAAiC,EAHpC;AAIHpE,IAAAA,QAAQ,EAAE0D,SAAS,CAAC1D,QAAV,IAAsB,GAJ7B;AAKHqE,IAAAA,MAAM,EAAEX,SAAS,CAACW,MAAV,IAAoB,EALzB;AAMHC,IAAAA,IAAI,EAAEZ,SAAS,CAACY,IAAV,IAAkB;AANrB,GAAP;AAQH;AACD;AACA;AACA;AACA;AACA;;;AACA,MAAME,6BAA6B,GAAG,IAAInH,cAAJ,CAAmB,+BAAnB,CAAtC;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMoH,oBAAN,CAA2B;AACvB7F,EAAAA,WAAW,CAAC8F,MAAD,EAAS;AAChB,SAAKpB,QAAL,GAAgB,EAAhB;AACA,SAAKqB,UAAL,GAAkB,IAAIlH,OAAJ,EAAlB;AACA,SAAKmH,cAAL,GAAsB,CAAtB;AACA,SAAK/F,UAAL,GAAkB,CAAC;AAAEsF,MAAAA,QAAQ,EAAE,EAAZ;AAAgBD,MAAAA,QAAQ,EAAE,EAA1B;AAA8BE,MAAAA,IAAI,EAAE,EAApC;AAAwCpE,MAAAA,QAAQ,EAAE,GAAlD;AAAuDqE,MAAAA,MAAM,EAAE,EAA/D;AAAmEC,MAAAA,IAAI,EAAE,EAAzE;AAA6E5E,MAAAA,KAAK,EAAE;AAApF,KAAD,CAAlB;;AACA,QAAIgF,MAAJ,EAAY;AACR,WAAKpB,QAAL,GAAgBoB,MAAM,CAACG,WAAP,IAAsB,EAAtC;AACA,YAAMC,aAAa,GAAG,KAAKC,YAAL,CAAkB,IAAlB,EAAwBL,MAAM,CAACM,QAAP,IAAmB,iBAA3C,EAA8D,KAAK1B,QAAnE,CAAtB;AACA,WAAKzE,UAAL,CAAgB,CAAhB,IAAqB,EAAE,GAAGiG;AAAL,OAArB;AACH;AACJ;;AACW,MAARX,QAAQ,GAAG;AACX,WAAO,KAAKtF,UAAL,CAAgB,KAAK+F,cAArB,EAAqCT,QAA5C;AACH;;AACW,MAARD,QAAQ,GAAG;AACX,WAAO,KAAKrF,UAAL,CAAgB,KAAK+F,cAArB,EAAqCV,QAA5C;AACH;;AACO,MAAJE,IAAI,GAAG;AACP,WAAO,KAAKvF,UAAL,CAAgB,KAAK+F,cAArB,EAAqCR,IAA5C;AACH;;AACW,MAARpE,QAAQ,GAAG;AACX,WAAO,KAAKnB,UAAL,CAAgB,KAAK+F,cAArB,EAAqC5E,QAA5C;AACH;;AACS,MAANqE,MAAM,GAAG;AACT,WAAO,KAAKxF,UAAL,CAAgB,KAAK+F,cAArB,EAAqCP,MAA5C;AACH;;AACO,MAAJC,IAAI,GAAG;AACP,WAAO,KAAKzF,UAAL,CAAgB,KAAK+F,cAArB,EAAqCN,IAA5C;AACH;;AACQ,MAAL5E,KAAK,GAAG;AACR,WAAO,KAAKb,UAAL,CAAgB,KAAK+F,cAArB,EAAqClF,KAA5C;AACH;;AACDuF,EAAAA,kBAAkB,GAAG;AACjB,WAAO,KAAK3B,QAAZ;AACH;;AACDR,EAAAA,UAAU,CAAC7B,EAAD,EAAK;AACX;AACA;AACA,WAAO,MAAM,CAAG,CAAhB;AACH;;AACDiE,EAAAA,YAAY,CAACjE,EAAD,EAAK;AACb,UAAMkE,YAAY,GAAG,KAAKR,UAAL,CAAgBxD,SAAhB,CAA0BF,EAA1B,CAArB;AACA,WAAO,MAAMkE,YAAY,CAACC,WAAb,EAAb;AACH;;AACO,MAAJC,IAAI,GAAG;AACP,QAAIlH,GAAG,GAAI,GAAE,KAAK+F,QAAS,KAAI,KAAKC,QAAS,GAAE,KAAKC,IAAL,GAAY,MAAM,KAAKA,IAAvB,GAA8B,EAAG,EAAhF;AACAjG,IAAAA,GAAG,IAAK,GAAE,KAAK6B,QAAL,KAAkB,GAAlB,GAAwB,EAAxB,GAA6B,KAAKA,QAAS,GAAE,KAAKqE,MAAO,GAAE,KAAKC,IAAK,EAA/E;AACA,WAAOnG,GAAP;AACH;;AACM,MAAHA,GAAG,GAAG;AACN,WAAQ,GAAE,KAAK6B,QAAS,GAAE,KAAKqE,MAAO,GAAE,KAAKC,IAAK,EAAlD;AACH;;AACDS,EAAAA,YAAY,CAACrF,KAAD,EAAQvB,GAAR,EAAamF,QAAQ,GAAG,EAAxB,EAA4B;AACpC;AACA5D,IAAAA,KAAK,GAAG4F,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe9F,KAAf,CAAX,CAAR;AACA,WAAO,EAAE,GAAG0D,QAAQ,CAACjF,GAAD,EAAMmF,QAAN,CAAb;AAA8B5D,MAAAA;AAA9B,KAAP;AACH;;AACDe,EAAAA,YAAY,CAACf,KAAD,EAAQkD,KAAR,EAAeM,MAAf,EAAuB;AAC/B,UAAM;AAAElD,MAAAA,QAAF;AAAYqE,MAAAA,MAAZ;AAAoB3E,MAAAA,KAAK,EAAE+F,WAA3B;AAAwCnB,MAAAA;AAAxC,QAAiD,KAAKS,YAAL,CAAkBrF,KAAlB,EAAyBwD,MAAzB,CAAvD;AACA,SAAKrE,UAAL,CAAgB,KAAK+F,cAArB,IACI,EAAE,GAAG,KAAK/F,UAAL,CAAgB,KAAK+F,cAArB,CAAL;AAA2C5E,MAAAA,QAA3C;AAAqDqE,MAAAA,MAArD;AAA6DC,MAAAA,IAA7D;AAAmE5E,MAAAA,KAAK,EAAE+F;AAA1E,KADJ;AAEH;;AACD/C,EAAAA,SAAS,CAAChD,KAAD,EAAQkD,KAAR,EAAeM,MAAf,EAAuB;AAC5B,UAAM;AAAElD,MAAAA,QAAF;AAAYqE,MAAAA,MAAZ;AAAoB3E,MAAAA,KAAK,EAAE+F,WAA3B;AAAwCnB,MAAAA;AAAxC,QAAiD,KAAKS,YAAL,CAAkBrF,KAAlB,EAAyBwD,MAAzB,CAAvD;;AACA,QAAI,KAAK0B,cAAL,GAAsB,CAA1B,EAA6B;AACzB,WAAK/F,UAAL,CAAgBgD,MAAhB,CAAuB,KAAK+C,cAAL,GAAsB,CAA7C;AACH;;AACD,SAAK/F,UAAL,CAAgBwB,IAAhB,CAAqB,EAAE,GAAG,KAAKxB,UAAL,CAAgB,KAAK+F,cAArB,CAAL;AAA2C5E,MAAAA,QAA3C;AAAqDqE,MAAAA,MAArD;AAA6DC,MAAAA,IAA7D;AAAmE5E,MAAAA,KAAK,EAAE+F;AAA1E,KAArB;AACA,SAAKb,cAAL,GAAsB,KAAK/F,UAAL,CAAgBhB,MAAhB,GAAyB,CAA/C;AACH;;AACD8C,EAAAA,OAAO,GAAG;AACN,UAAM+E,MAAM,GAAG,KAAKvH,GAApB;AACA,UAAMwH,OAAO,GAAG,KAAKrB,IAArB;;AACA,QAAI,KAAKM,cAAL,GAAsB,KAAK/F,UAAL,CAAgBhB,MAA1C,EAAkD;AAC9C,WAAK+G,cAAL;AACH;;AACD,SAAKgB,kBAAL,CAAwBD,OAAxB,EAAiCD,MAAjC;AACH;;AACD9E,EAAAA,IAAI,GAAG;AACH,UAAM8E,MAAM,GAAG,KAAKvH,GAApB;AACA,UAAMwH,OAAO,GAAG,KAAKrB,IAArB;;AACA,QAAI,KAAKM,cAAL,GAAsB,CAA1B,EAA6B;AACzB,WAAKA,cAAL;AACH;;AACD,SAAKgB,kBAAL,CAAwBD,OAAxB,EAAiCD,MAAjC;AACH;;AACD7E,EAAAA,SAAS,CAACC,gBAAgB,GAAG,CAApB,EAAuB;AAC5B,UAAM4E,MAAM,GAAG,KAAKvH,GAApB;AACA,UAAMwH,OAAO,GAAG,KAAKrB,IAArB;AACA,UAAMvD,aAAa,GAAG,KAAK6D,cAAL,GAAsB9D,gBAA5C;;AACA,QAAIC,aAAa,IAAI,CAAjB,IAAsBA,aAAa,GAAG,KAAKlC,UAAL,CAAgBhB,MAA1D,EAAkE;AAC9D,WAAK+G,cAAL,GAAsB7D,aAAtB;AACH;;AACD,SAAK6E,kBAAL,CAAwBD,OAAxB,EAAiCD,MAAjC;AACH;;AACDjG,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKC,KAAZ;AACH;;AACDkG,EAAAA,kBAAkB,CAACD,OAAD,EAAUD,MAAV,EAAkB;AAChC,QAAIC,OAAO,KAAK,KAAKrB,IAArB,EAA2B;AACvBuB,MAAAA,iBAAiB,CAAC,MAAM,KAAKlB,UAAL,CAAgBlD,IAAhB,CAAqB;AAAEO,QAAAA,IAAI,EAAE,YAAR;AAAsBtC,QAAAA,KAAK,EAAE,IAA7B;AAAmCgG,QAAAA,MAAnC;AAA2CxC,QAAAA,MAAM,EAAE,KAAK/E;AAAxD,OAArB,CAAP,CAAjB;AACH;AACJ;;AAvGsB;;AAyG3BsG,oBAAoB,CAAC3C,IAArB;AAAA,mBAAiH2C,oBAAjH,EArR8FvH,EAqR9F,UAAuJsH,6BAAvJ;AAAA;;AACAC,oBAAoB,CAAC1C,KAArB,kBAtR8F7E,EAsR9F;AAAA,SAAqHuH,oBAArH;AAAA,WAAqHA,oBAArH;AAAA;;AACA;AAAA,qDAvR8FvH,EAuR9F,mBAA2FuH,oBAA3F,EAA6H,CAAC;AAClHzC,IAAAA,IAAI,EAAE5E;AAD4G,GAAD,CAA7H,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAE4E,MAAAA,IAAI,EAAE8D,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AAC9D/D,QAAAA,IAAI,EAAE1E,MADwD;AAE9D0I,QAAAA,IAAI,EAAE,CAACxB,6BAAD;AAFwD,OAAD,EAG9D;AACCxC,QAAAA,IAAI,EAAEzE;AADP,OAH8D;AAA/B,KAAD,CAAP;AAKlB,GAPxB;AAAA;;AAQA,SAASsI,iBAAT,CAA2BI,EAA3B,EAA+B;AAC3BC,EAAAA,OAAO,CAACC,OAAR,CAAgB,IAAhB,EAAsBC,IAAtB,CAA2BH,EAA3B;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASzB,6BAAT,EAAwCvC,oBAAxC,EAA8DwC,oBAA9D,EAAoF9F,WAApF","sourcesContent":["/**\r\n * @license Angular v13.0.3\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport * as i0 from '@angular/core';\r\nimport { EventEmitter, Injectable, InjectionToken, Inject, Optional } from '@angular/core';\r\nimport { LocationStrategy } from '@angular/common';\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Joins two parts of a URL with a slash if needed.\r\n *\r\n * @param start  URL string\r\n * @param end    URL string\r\n *\r\n *\r\n * @returns The joined URL string.\r\n */\r\nfunction joinWithSlash(start, end) {\r\n    if (start.length == 0) {\r\n        return end;\r\n    }\r\n    if (end.length == 0) {\r\n        return start;\r\n    }\r\n    let slashes = 0;\r\n    if (start.endsWith('/')) {\r\n        slashes++;\r\n    }\r\n    if (end.startsWith('/')) {\r\n        slashes++;\r\n    }\r\n    if (slashes == 2) {\r\n        return start + end.substring(1);\r\n    }\r\n    if (slashes == 1) {\r\n        return start + end;\r\n    }\r\n    return start + '/' + end;\r\n}\r\n/**\r\n * Removes a trailing slash from a URL string if needed.\r\n * Looks for the first occurrence of either `#`, `?`, or the end of the\r\n * line as `/` characters and removes the trailing slash if one exists.\r\n *\r\n * @param url URL string.\r\n *\r\n * @returns The URL string, modified if needed.\r\n */\r\nfunction stripTrailingSlash(url) {\r\n    const match = url.match(/#|\\?|$/);\r\n    const pathEndIdx = match && match.index || url.length;\r\n    const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\r\n    return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\r\n}\r\n/**\r\n * Normalizes URL parameters by prepending with `?` if needed.\r\n *\r\n * @param  params String of URL parameters.\r\n *\r\n * @returns The normalized URL parameters string.\r\n */\r\nfunction normalizeQueryParams(params) {\r\n    return params && params[0] !== '?' ? '?' + params : params;\r\n}\r\n\r\n/**\r\n * A spy for {@link Location} that allows tests to fire simulated location events.\r\n *\r\n * @publicApi\r\n */\r\nclass SpyLocation {\r\n    constructor() {\r\n        this.urlChanges = [];\r\n        this._history = [new LocationState('', '', null)];\r\n        this._historyIndex = 0;\r\n        /** @internal */\r\n        this._subject = new EventEmitter();\r\n        /** @internal */\r\n        this._baseHref = '';\r\n        /** @internal */\r\n        this._platformStrategy = null;\r\n        /** @internal */\r\n        this._platformLocation = null;\r\n        /** @internal */\r\n        this._urlChangeListeners = [];\r\n    }\r\n    setInitialPath(url) {\r\n        this._history[this._historyIndex].path = url;\r\n    }\r\n    setBaseHref(url) {\r\n        this._baseHref = url;\r\n    }\r\n    path() {\r\n        return this._history[this._historyIndex].path;\r\n    }\r\n    getState() {\r\n        return this._history[this._historyIndex].state;\r\n    }\r\n    isCurrentPathEqualTo(path, query = '') {\r\n        const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\r\n        const currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\r\n        return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');\r\n    }\r\n    simulateUrlPop(pathname) {\r\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\r\n    }\r\n    simulateHashChange(pathname) {\r\n        const path = this.prepareExternalUrl(pathname);\r\n        this.pushHistory(path, '', null);\r\n        this.urlChanges.push('hash: ' + pathname);\r\n        // the browser will automatically fire popstate event before each `hashchange` event, so we need\r\n        // to simulate it.\r\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\r\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });\r\n    }\r\n    prepareExternalUrl(url) {\r\n        if (url.length > 0 && !url.startsWith('/')) {\r\n            url = '/' + url;\r\n        }\r\n        return this._baseHref + url;\r\n    }\r\n    go(path, query = '', state = null) {\r\n        path = this.prepareExternalUrl(path);\r\n        this.pushHistory(path, query, state);\r\n        const locationState = this._history[this._historyIndex - 1];\r\n        if (locationState.path == path && locationState.query == query) {\r\n            return;\r\n        }\r\n        const url = path + (query.length > 0 ? ('?' + query) : '');\r\n        this.urlChanges.push(url);\r\n        this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\r\n    }\r\n    replaceState(path, query = '', state = null) {\r\n        path = this.prepareExternalUrl(path);\r\n        const history = this._history[this._historyIndex];\r\n        if (history.path == path && history.query == query) {\r\n            return;\r\n        }\r\n        history.path = path;\r\n        history.query = query;\r\n        history.state = state;\r\n        const url = path + (query.length > 0 ? ('?' + query) : '');\r\n        this.urlChanges.push('replace: ' + url);\r\n        this._notifyUrlChangeListeners(path + normalizeQueryParams(query), state);\r\n    }\r\n    forward() {\r\n        if (this._historyIndex < (this._history.length - 1)) {\r\n            this._historyIndex++;\r\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true, 'type': 'popstate' });\r\n        }\r\n    }\r\n    back() {\r\n        if (this._historyIndex > 0) {\r\n            this._historyIndex--;\r\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true, 'type': 'popstate' });\r\n        }\r\n    }\r\n    historyGo(relativePosition = 0) {\r\n        const nextPageIndex = this._historyIndex + relativePosition;\r\n        if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {\r\n            this._historyIndex = nextPageIndex;\r\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true, 'type': 'popstate' });\r\n        }\r\n    }\r\n    onUrlChange(fn) {\r\n        this._urlChangeListeners.push(fn);\r\n        if (!this._urlChangeSubscription) {\r\n            this._urlChangeSubscription = this.subscribe(v => {\r\n                this._notifyUrlChangeListeners(v.url, v.state);\r\n            });\r\n        }\r\n    }\r\n    /** @internal */\r\n    _notifyUrlChangeListeners(url = '', state) {\r\n        this._urlChangeListeners.forEach(fn => fn(url, state));\r\n    }\r\n    subscribe(onNext, onThrow, onReturn) {\r\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\r\n    }\r\n    normalize(url) {\r\n        return null;\r\n    }\r\n    pushHistory(path, query, state) {\r\n        if (this._historyIndex > 0) {\r\n            this._history.splice(this._historyIndex + 1);\r\n        }\r\n        this._history.push(new LocationState(path, query, state));\r\n        this._historyIndex = this._history.length - 1;\r\n    }\r\n}\r\nSpyLocation.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SpyLocation, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nSpyLocation.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SpyLocation });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SpyLocation, decorators: [{\r\n            type: Injectable\r\n        }] });\r\nclass LocationState {\r\n    constructor(path, query, state) {\r\n        this.path = path;\r\n        this.query = query;\r\n        this.state = state;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\r\n * location events.\r\n *\r\n * @publicApi\r\n */\r\nclass MockLocationStrategy extends LocationStrategy {\r\n    constructor() {\r\n        super();\r\n        this.internalBaseHref = '/';\r\n        this.internalPath = '/';\r\n        this.internalTitle = '';\r\n        this.urlChanges = [];\r\n        /** @internal */\r\n        this._subject = new EventEmitter();\r\n        this.stateChanges = [];\r\n    }\r\n    simulatePopState(url) {\r\n        this.internalPath = url;\r\n        this._subject.emit(new _MockPopStateEvent(this.path()));\r\n    }\r\n    path(includeHash = false) {\r\n        return this.internalPath;\r\n    }\r\n    prepareExternalUrl(internal) {\r\n        if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\r\n            return this.internalBaseHref + internal.substring(1);\r\n        }\r\n        return this.internalBaseHref + internal;\r\n    }\r\n    pushState(ctx, title, path, query) {\r\n        // Add state change to changes array\r\n        this.stateChanges.push(ctx);\r\n        this.internalTitle = title;\r\n        const url = path + (query.length > 0 ? ('?' + query) : '');\r\n        this.internalPath = url;\r\n        const externalUrl = this.prepareExternalUrl(url);\r\n        this.urlChanges.push(externalUrl);\r\n    }\r\n    replaceState(ctx, title, path, query) {\r\n        // Reset the last index of stateChanges to the ctx (state) object\r\n        this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\r\n        this.internalTitle = title;\r\n        const url = path + (query.length > 0 ? ('?' + query) : '');\r\n        this.internalPath = url;\r\n        const externalUrl = this.prepareExternalUrl(url);\r\n        this.urlChanges.push('replace: ' + externalUrl);\r\n    }\r\n    onPopState(fn) {\r\n        this._subject.subscribe({ next: fn });\r\n    }\r\n    getBaseHref() {\r\n        return this.internalBaseHref;\r\n    }\r\n    back() {\r\n        if (this.urlChanges.length > 0) {\r\n            this.urlChanges.pop();\r\n            this.stateChanges.pop();\r\n            const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\r\n            this.simulatePopState(nextUrl);\r\n        }\r\n    }\r\n    forward() {\r\n        throw 'not implemented';\r\n    }\r\n    getState() {\r\n        return this.stateChanges[(this.stateChanges.length || 1) - 1];\r\n    }\r\n}\r\nMockLocationStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: MockLocationStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nMockLocationStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: MockLocationStrategy });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: MockLocationStrategy, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return []; } });\r\nclass _MockPopStateEvent {\r\n    constructor(newUrl) {\r\n        this.newUrl = newUrl;\r\n        this.pop = true;\r\n        this.type = 'popstate';\r\n    }\r\n}\r\n\r\n/**\r\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\r\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\r\n *  12            3  4          5       6  7        8 9\r\n *\r\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\r\n *\r\n * Results in:\r\n *\r\n * $1 = http:\r\n * $2 = http\r\n * $3 = //www.ics.uci.edu\r\n * $4 = www.ics.uci.edu\r\n * $5 = /pub/ietf/uri/\r\n * $6 = <undefined>\r\n * $7 = <undefined>\r\n * $8 = #Related\r\n * $9 = Related\r\n */\r\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\r\nfunction parseUrl(urlStr, baseHref) {\r\n    const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\r\n    let serverBase;\r\n    // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\r\n    // an arbitrary base URL which can be removed afterward.\r\n    if (!verifyProtocol.test(urlStr)) {\r\n        serverBase = 'http://empty.com/';\r\n    }\r\n    let parsedUrl;\r\n    try {\r\n        parsedUrl = new URL(urlStr, serverBase);\r\n    }\r\n    catch (e) {\r\n        const result = urlParse.exec(serverBase || '' + urlStr);\r\n        if (!result) {\r\n            throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\r\n        }\r\n        const hostSplit = result[4].split(':');\r\n        parsedUrl = {\r\n            protocol: result[1],\r\n            hostname: hostSplit[0],\r\n            port: hostSplit[1] || '',\r\n            pathname: result[5],\r\n            search: result[6],\r\n            hash: result[8],\r\n        };\r\n    }\r\n    if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\r\n        parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\r\n    }\r\n    return {\r\n        hostname: !serverBase && parsedUrl.hostname || '',\r\n        protocol: !serverBase && parsedUrl.protocol || '',\r\n        port: !serverBase && parsedUrl.port || '',\r\n        pathname: parsedUrl.pathname || '/',\r\n        search: parsedUrl.search || '',\r\n        hash: parsedUrl.hash || '',\r\n    };\r\n}\r\n/**\r\n * Provider for mock platform location config\r\n *\r\n * @publicApi\r\n */\r\nconst MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\r\n/**\r\n * Mock implementation of URL state.\r\n *\r\n * @publicApi\r\n */\r\nclass MockPlatformLocation {\r\n    constructor(config) {\r\n        this.baseHref = '';\r\n        this.hashUpdate = new Subject();\r\n        this.urlChangeIndex = 0;\r\n        this.urlChanges = [{ hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null }];\r\n        if (config) {\r\n            this.baseHref = config.appBaseHref || '';\r\n            const parsedChanges = this.parseChanges(null, config.startUrl || 'http://_empty_/', this.baseHref);\r\n            this.urlChanges[0] = { ...parsedChanges };\r\n        }\r\n    }\r\n    get hostname() {\r\n        return this.urlChanges[this.urlChangeIndex].hostname;\r\n    }\r\n    get protocol() {\r\n        return this.urlChanges[this.urlChangeIndex].protocol;\r\n    }\r\n    get port() {\r\n        return this.urlChanges[this.urlChangeIndex].port;\r\n    }\r\n    get pathname() {\r\n        return this.urlChanges[this.urlChangeIndex].pathname;\r\n    }\r\n    get search() {\r\n        return this.urlChanges[this.urlChangeIndex].search;\r\n    }\r\n    get hash() {\r\n        return this.urlChanges[this.urlChangeIndex].hash;\r\n    }\r\n    get state() {\r\n        return this.urlChanges[this.urlChangeIndex].state;\r\n    }\r\n    getBaseHrefFromDOM() {\r\n        return this.baseHref;\r\n    }\r\n    onPopState(fn) {\r\n        // No-op: a state stack is not implemented, so\r\n        // no events will ever come.\r\n        return () => { };\r\n    }\r\n    onHashChange(fn) {\r\n        const subscription = this.hashUpdate.subscribe(fn);\r\n        return () => subscription.unsubscribe();\r\n    }\r\n    get href() {\r\n        let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\r\n        url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\r\n        return url;\r\n    }\r\n    get url() {\r\n        return `${this.pathname}${this.search}${this.hash}`;\r\n    }\r\n    parseChanges(state, url, baseHref = '') {\r\n        // When the `history.state` value is stored, it is always copied.\r\n        state = JSON.parse(JSON.stringify(state));\r\n        return { ...parseUrl(url, baseHref), state };\r\n    }\r\n    replaceState(state, title, newUrl) {\r\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\r\n        this.urlChanges[this.urlChangeIndex] =\r\n            { ...this.urlChanges[this.urlChangeIndex], pathname, search, hash, state: parsedState };\r\n    }\r\n    pushState(state, title, newUrl) {\r\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\r\n        if (this.urlChangeIndex > 0) {\r\n            this.urlChanges.splice(this.urlChangeIndex + 1);\r\n        }\r\n        this.urlChanges.push({ ...this.urlChanges[this.urlChangeIndex], pathname, search, hash, state: parsedState });\r\n        this.urlChangeIndex = this.urlChanges.length - 1;\r\n    }\r\n    forward() {\r\n        const oldUrl = this.url;\r\n        const oldHash = this.hash;\r\n        if (this.urlChangeIndex < this.urlChanges.length) {\r\n            this.urlChangeIndex++;\r\n        }\r\n        this.scheduleHashUpdate(oldHash, oldUrl);\r\n    }\r\n    back() {\r\n        const oldUrl = this.url;\r\n        const oldHash = this.hash;\r\n        if (this.urlChangeIndex > 0) {\r\n            this.urlChangeIndex--;\r\n        }\r\n        this.scheduleHashUpdate(oldHash, oldUrl);\r\n    }\r\n    historyGo(relativePosition = 0) {\r\n        const oldUrl = this.url;\r\n        const oldHash = this.hash;\r\n        const nextPageIndex = this.urlChangeIndex + relativePosition;\r\n        if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {\r\n            this.urlChangeIndex = nextPageIndex;\r\n        }\r\n        this.scheduleHashUpdate(oldHash, oldUrl);\r\n    }\r\n    getState() {\r\n        return this.state;\r\n    }\r\n    scheduleHashUpdate(oldHash, oldUrl) {\r\n        if (oldHash !== this.hash) {\r\n            scheduleMicroTask(() => this.hashUpdate.next({ type: 'hashchange', state: null, oldUrl, newUrl: this.url }));\r\n        }\r\n    }\r\n}\r\nMockPlatformLocation.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: MockPlatformLocation, deps: [{ token: MOCK_PLATFORM_LOCATION_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMockPlatformLocation.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: MockPlatformLocation });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: MockPlatformLocation, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MOCK_PLATFORM_LOCATION_CONFIG]\r\n                }, {\r\n                    type: Optional\r\n                }] }]; } });\r\nfunction scheduleMicroTask(cb) {\r\n    Promise.resolve(null).then(cb);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation };\r\n\n"]},"metadata":{},"sourceType":"module"}