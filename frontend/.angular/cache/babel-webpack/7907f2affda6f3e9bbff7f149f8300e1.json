{"ast":null,"code":"import _asyncToGenerator from \"D:/Documents/GitHub/Angular-API/API-REST/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * @license Angular v13.0.3\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\nimport { getDebugNode, RendererFactory2, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetInjectableDef, resolveForwardRef, ɵNG_COMP_DEF, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, NgZone, Compiler, COMPILER_OPTIONS, ɵNgModuleFactory, ModuleWithComponentFactories, InjectionToken, Injector, InjectFlags, ɵresetCompiledComponents, ɵflushModuleScopingQueueAsMuchAsPossible } from '@angular/core';\nimport { ResourceLoader } from '@angular/compiler';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Wraps a test function in an asynchronous test zone. The test will automatically\r\n * complete when all asynchronous calls within this zone are done. Can be used\r\n * to wrap an {@link inject} call.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * it('...', waitForAsync(inject([AClass], (object) => {\r\n *   object.doSomething.then(() => {\r\n *     expect(...);\r\n *   })\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\n\nfunction waitForAsync(fn) {\n  const _Zone = typeof Zone !== 'undefined' ? Zone : null;\n\n  if (!_Zone) {\n    return function () {\n      return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js');\n    };\n  }\n\n  const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n\n  if (typeof asyncTest === 'function') {\n    return asyncTest(fn);\n  }\n\n  return function () {\n    return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' + 'Please make sure that your environment includes zone.js/testing');\n  };\n}\n/**\r\n * @deprecated use `waitForAsync()`, (expected removal in v12)\r\n * @see {@link waitForAsync}\r\n * @publicApi\r\n * */\n\n\nfunction async(fn) {\n  return waitForAsync(fn);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Fixture for debugging and testing a component.\r\n *\r\n * @publicApi\r\n */\n\n\nclass ComponentFixture {\n  constructor(componentRef, ngZone, _autoDetect) {\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n    this._autoDetect = _autoDetect;\n    this._isStable = true;\n    this._isDestroyed = false;\n    this._resolve = null;\n    this._promise = null;\n    this._onUnstableSubscription = null;\n    this._onStableSubscription = null;\n    this._onMicrotaskEmptySubscription = null;\n    this._onErrorSubscription = null;\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = getDebugNode(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n\n    if (ngZone) {\n      // Create subscriptions outside the NgZone so that the callbacks run oustide\n      // of NgZone.\n      ngZone.runOutsideAngular(() => {\n        this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n          next: () => {\n            this._isStable = false;\n          }\n        });\n        this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n          next: () => {\n            if (this._autoDetect) {\n              // Do a change detection run with checkNoChanges set to true to check\n              // there are no changes on the second run.\n              this.detectChanges(true);\n            }\n          }\n        });\n        this._onStableSubscription = ngZone.onStable.subscribe({\n          next: () => {\n            this._isStable = true; // Check whether there is a pending whenStable() completer to resolve.\n\n            if (this._promise !== null) {\n              // If so check whether there are no pending macrotasks before resolving.\n              // Do this check in the next tick so that ngZone gets a chance to update the state of\n              // pending macrotasks.\n              scheduleMicroTask(() => {\n                if (!ngZone.hasPendingMacrotasks) {\n                  if (this._promise !== null) {\n                    this._resolve(true);\n\n                    this._resolve = null;\n                    this._promise = null;\n                  }\n                }\n              });\n            }\n          }\n        });\n        this._onErrorSubscription = ngZone.onError.subscribe({\n          next: error => {\n            throw error;\n          }\n        });\n      });\n    }\n  }\n\n  _tick(checkNoChanges) {\n    this.changeDetectorRef.detectChanges();\n\n    if (checkNoChanges) {\n      this.checkNoChanges();\n    }\n  }\n  /**\r\n   * Trigger a change detection cycle for the component.\r\n   */\n\n\n  detectChanges(checkNoChanges = true) {\n    if (this.ngZone != null) {\n      // Run the change detection inside the NgZone so that any async tasks as part of the change\n      // detection are captured by the zone and can be waited for in isStable.\n      this.ngZone.run(() => {\n        this._tick(checkNoChanges);\n      });\n    } else {\n      // Running without zone. Just do the change detection.\n      this._tick(checkNoChanges);\n    }\n  }\n  /**\r\n   * Do a change detection run to make sure there were no changes.\r\n   */\n\n\n  checkNoChanges() {\n    this.changeDetectorRef.checkNoChanges();\n  }\n  /**\r\n   * Set whether the fixture should autodetect changes.\r\n   *\r\n   * Also runs detectChanges once so that any existing change is detected.\r\n   */\n\n\n  autoDetectChanges(autoDetect = true) {\n    if (this.ngZone == null) {\n      throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n    }\n\n    this._autoDetect = autoDetect;\n    this.detectChanges();\n  }\n  /**\r\n   * Return whether the fixture is currently stable or has async tasks that have not been completed\r\n   * yet.\r\n   */\n\n\n  isStable() {\n    return this._isStable && !this.ngZone.hasPendingMacrotasks;\n  }\n  /**\r\n   * Get a promise that resolves when the fixture is stable.\r\n   *\r\n   * This can be used to resume testing after events have triggered asynchronous activity or\r\n   * asynchronous change detection.\r\n   */\n\n\n  whenStable() {\n    if (this.isStable()) {\n      return Promise.resolve(false);\n    } else if (this._promise !== null) {\n      return this._promise;\n    } else {\n      this._promise = new Promise(res => {\n        this._resolve = res;\n      });\n      return this._promise;\n    }\n  }\n\n  _getRenderer() {\n    if (this._renderer === undefined) {\n      this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n    }\n\n    return this._renderer;\n  }\n  /**\r\n   * Get a promise that resolves when the ui state is stable following animations.\r\n   */\n\n\n  whenRenderingDone() {\n    const renderer = this._getRenderer();\n\n    if (renderer && renderer.whenRenderingDone) {\n      return renderer.whenRenderingDone();\n    }\n\n    return this.whenStable();\n  }\n  /**\r\n   * Trigger component destruction.\r\n   */\n\n\n  destroy() {\n    if (!this._isDestroyed) {\n      this.componentRef.destroy();\n\n      if (this._onUnstableSubscription != null) {\n        this._onUnstableSubscription.unsubscribe();\n\n        this._onUnstableSubscription = null;\n      }\n\n      if (this._onStableSubscription != null) {\n        this._onStableSubscription.unsubscribe();\n\n        this._onStableSubscription = null;\n      }\n\n      if (this._onMicrotaskEmptySubscription != null) {\n        this._onMicrotaskEmptySubscription.unsubscribe();\n\n        this._onMicrotaskEmptySubscription = null;\n      }\n\n      if (this._onErrorSubscription != null) {\n        this._onErrorSubscription.unsubscribe();\n\n        this._onErrorSubscription = null;\n      }\n\n      this._isDestroyed = true;\n    }\n  }\n\n}\n\nfunction scheduleMicroTask(fn) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\n\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\n\nconst fakeAsyncTestModuleNotLoadedErrorMessage = `zone-testing.js is needed for the fakeAsync() test helper but could not be found.\n        Please make sure that your environment includes zone.js/testing`;\n/**\r\n * Clears out the shared fake async zone for a test.\r\n * To be called in a global `beforeEach`.\r\n *\r\n * @publicApi\r\n */\n\nfunction resetFakeAsyncZone() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.resetFakeAsyncZone();\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\r\n * Wraps a function to be executed in the `fakeAsync` zone:\r\n * - Microtasks are manually executed by calling `flushMicrotasks()`.\r\n * - Timers are synchronous; `tick()` simulates the asynchronous passage of time.\r\n *\r\n * If there are any pending timers at the end of the function, an exception is thrown.\r\n *\r\n * Can be used to wrap `inject()` calls.\r\n *\r\n * @param fn The function that you want to wrap in the `fakeAysnc` zone.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * {@example core/testing/ts/fake_async.ts region='basic'}\r\n *\r\n *\r\n * @returns The function wrapped to be executed in the `fakeAsync` zone.\r\n * Any arguments passed when calling this returned function will be passed through to the `fn`\r\n * function in the parameters when it is called.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction fakeAsync(fn) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.fakeAsync(fn);\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\r\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone.\r\n *\r\n * The microtasks queue is drained at the very start of this function and after any timer callback\r\n * has been executed.\r\n *\r\n * @param millis The number of milliseconds to advance the virtual timer.\r\n * @param tickOptions The options to pass to the `tick()` function.\r\n *\r\n * @usageNotes\r\n *\r\n * The `tick()` option is a flag called `processNewMacroTasksSynchronously`,\r\n * which determines whether or not to invoke new macroTasks.\r\n *\r\n * If you provide a `tickOptions` object, but do not specify a\r\n * `processNewMacroTasksSynchronously` property (`tick(100, {})`),\r\n * then `processNewMacroTasksSynchronously` defaults to true.\r\n *\r\n * If you omit the `tickOptions` parameter (`tick(100))`), then\r\n * `tickOptions` defaults to `{processNewMacroTasksSynchronously: true}`.\r\n *\r\n * ### Example\r\n *\r\n * {@example core/testing/ts/fake_async.ts region='basic'}\r\n *\r\n * The following example includes a nested timeout (new macroTask), and\r\n * the `tickOptions` parameter is allowed to default. In this case,\r\n * `processNewMacroTasksSynchronously` defaults to true, and the nested\r\n * function is executed on each tick.\r\n *\r\n * ```\r\n * it ('test with nested setTimeout', fakeAsync(() => {\r\n *   let nestedTimeoutInvoked = false;\r\n *   function funcWithNestedTimeout() {\r\n *     setTimeout(() => {\r\n *       nestedTimeoutInvoked = true;\r\n *     });\r\n *   };\r\n *   setTimeout(funcWithNestedTimeout);\r\n *   tick();\r\n *   expect(nestedTimeoutInvoked).toBe(true);\r\n * }));\r\n * ```\r\n *\r\n * In the following case, `processNewMacroTasksSynchronously` is explicitly\r\n * set to false, so the nested timeout function is not invoked.\r\n *\r\n * ```\r\n * it ('test with nested setTimeout', fakeAsync(() => {\r\n *   let nestedTimeoutInvoked = false;\r\n *   function funcWithNestedTimeout() {\r\n *     setTimeout(() => {\r\n *       nestedTimeoutInvoked = true;\r\n *     });\r\n *   };\r\n *   setTimeout(funcWithNestedTimeout);\r\n *   tick(0, {processNewMacroTasksSynchronously: false});\r\n *   expect(nestedTimeoutInvoked).toBe(false);\r\n * }));\r\n * ```\r\n *\r\n *\r\n * @publicApi\r\n */\n\n\nfunction tick(millis = 0, tickOptions = {\n  processNewMacroTasksSynchronously: true\n}) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.tick(millis, tickOptions);\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\r\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone by\r\n * draining the macrotask queue until it is empty.\r\n *\r\n * @param maxTurns The maximum number of times the scheduler attempts to clear its queue before\r\n *     throwing an error.\r\n * @returns The simulated time elapsed, in milliseconds.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction flush(maxTurns) {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flush(maxTurns);\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\r\n * Discard all remaining periodic tasks.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction discardPeriodicTasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.discardPeriodicTasks();\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\r\n * Flush any pending microtasks.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction flushMicrotasks() {\n  if (fakeAsyncTestModule) {\n    return fakeAsyncTestModule.flushMicrotasks();\n  }\n\n  throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\r\n *\r\n * Example:\r\n * ```\r\n * @Component({\r\n *   selector: 'my-comp',\r\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\r\n * })\r\n * class MyComponent{\r\n * }\r\n *\r\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\r\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\r\n *\r\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\r\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\r\n *\r\n * // Use browser's `fetch()` function as the default resource resolution strategy.\r\n * resolveComponentResources(fetch).then(() => {\r\n *   // After resolution all URLs have been converted into `template` strings.\r\n *   renderComponent(MyComponent);\r\n * });\r\n *\r\n * ```\r\n *\r\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\r\n * to call this method outside JIT mode.\r\n *\r\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\r\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\r\n */\n\n\nfunction resolveComponentResources(resourceResolver) {\n  // Store all promises which are fetching the resources.\n  const componentResolved = []; // Cache so that we don't fetch the same resource more than once.\n\n  const urlMap = new Map();\n\n  function cachedResourceResolve(url) {\n    let promise = urlMap.get(url);\n\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n    }\n\n    return promise;\n  }\n\n  componentResourceResolutionQueue.forEach((component, type) => {\n    const promises = [];\n\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then(template => {\n        component.template = template;\n      }));\n    }\n\n    const styleUrls = component.styleUrls;\n    const styles = component.styles || (component.styles = []);\n    const styleOffset = component.styles.length;\n    styleUrls && styleUrls.forEach((styleUrl, index) => {\n      styles.push(''); // pre-allocate array.\n\n      promises.push(cachedResourceResolve(styleUrl).then(style => {\n        styles[styleOffset + index] = style;\n        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n\n        if (styleUrls.length == 0) {\n          component.styleUrls = undefined;\n        }\n      }));\n    });\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\n\nlet componentResourceResolutionQueue = new Map(); // Track when existing ɵcmp for a Type is waiting on resources.\n\nconst componentDefPendingResolution = new Set();\n\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\n\nfunction isComponentDefPendingResolution(type) {\n  return componentDefPendingResolution.has(type);\n}\n\nfunction componentNeedsResolution(component) {\n  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);\n}\n\nfunction clearResolutionOfComponentResourcesQueue() {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\n\nfunction restoreComponentResolutionQueue(queue) {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\n\nfunction isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\n\nfunction unwrapResponse(response) {\n  return typeof response == 'string' ? response : response.text();\n}\n\nfunction componentDefResolved(type) {\n  componentDefPendingResolution.delete(type);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nlet _nextReferenceId = 0;\n\nclass MetadataOverrider {\n  constructor() {\n    this._references = new Map();\n  }\n  /**\r\n   * Creates a new instance for the given metadata class\r\n   * based on an old instance and overrides.\r\n   */\n\n\n  overrideMetadata(metadataClass, oldMetadata, override) {\n    const props = {};\n\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach(prop => props[prop] = oldMetadata[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${ɵstringify(metadataClass)} at the same time!`);\n      }\n\n      setMetadata(props, override.set);\n    }\n\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n\n    return new metadataClass(props);\n  }\n\n}\n\nfunction removeMetadata(metadata, remove, references) {\n  const removeObjects = new Set();\n\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n\n    if (Array.isArray(removeValue)) {\n      removeValue.forEach(value => {\n        removeObjects.add(_propHashKey(prop, value, references));\n      });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n\n    if (Array.isArray(propValue)) {\n      metadata[prop] = propValue.filter(value => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n\nfunction addMetadata(metadata, add) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n\n    if (propValue != null && Array.isArray(propValue)) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata, set) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName, propValue, references) {\n  let nextObjectId = 0;\n  const objectIds = new Map();\n\n  const replacer = (key, value) => {\n    if (value !== null && typeof value === 'object') {\n      if (objectIds.has(value)) {\n        return objectIds.get(value);\n      } // Record an id for this object such that any later references use the object's id instead\n      // of the object itself, in order to break cyclic pointers in objects.\n\n\n      objectIds.set(value, `ɵobj#${nextObjectId++}`); // The first time an object is seen the object itself is serialized.\n\n      return value;\n    } else if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n\nfunction _serializeReference(ref, references) {\n  let id = references.get(ref);\n\n  if (!id) {\n    id = `${ɵstringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n\n  return id;\n}\n\nfunction _valueProps(obj) {\n  const props = []; // regular public props\n\n  Object.keys(obj).forEach(prop => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  }); // getters\n\n  let proto = obj;\n\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach(protoProp => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n\n  return props;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst reflection = new ɵReflectionCapabilities();\n/**\r\n * Allows to override ivy metadata for tests (via the `TestBed`).\r\n */\n\nclass OverrideResolver {\n  constructor() {\n    this.overrides = new Map();\n    this.resolved = new Map();\n  }\n\n  addOverride(type, override) {\n    const overrides = this.overrides.get(type) || [];\n    overrides.push(override);\n    this.overrides.set(type, overrides);\n    this.resolved.delete(type);\n  }\n\n  setOverrides(overrides) {\n    this.overrides.clear();\n    overrides.forEach(([type, override]) => {\n      this.addOverride(type, override);\n    });\n  }\n\n  getAnnotation(type) {\n    const annotations = reflection.annotations(type); // Try to find the nearest known Type annotation and make sure that this annotation is an\n    // instance of the type we are looking for, so we can use it for resolution. Note: there might\n    // be multiple known annotations found due to the fact that Components can extend Directives (so\n    // both Directive and Component annotations would be present), so we always check if the known\n    // annotation has the right type.\n\n    for (let i = annotations.length - 1; i >= 0; i--) {\n      const annotation = annotations[i];\n      const isKnownType = annotation instanceof Directive || annotation instanceof Component || annotation instanceof Pipe || annotation instanceof NgModule;\n\n      if (isKnownType) {\n        return annotation instanceof this.type ? annotation : null;\n      }\n    }\n\n    return null;\n  }\n\n  resolve(type) {\n    let resolved = this.resolved.get(type) || null;\n\n    if (!resolved) {\n      resolved = this.getAnnotation(type);\n\n      if (resolved) {\n        const overrides = this.overrides.get(type);\n\n        if (overrides) {\n          const overrider = new MetadataOverrider();\n          overrides.forEach(override => {\n            resolved = overrider.overrideMetadata(this.type, resolved, override);\n          });\n        }\n      }\n\n      this.resolved.set(type, resolved);\n    }\n\n    return resolved;\n  }\n\n}\n\nclass DirectiveResolver extends OverrideResolver {\n  get type() {\n    return Directive;\n  }\n\n}\n\nclass ComponentResolver extends OverrideResolver {\n  get type() {\n    return Component;\n  }\n\n}\n\nclass PipeResolver extends OverrideResolver {\n  get type() {\n    return Pipe;\n  }\n\n}\n\nclass NgModuleResolver extends OverrideResolver {\n  get type() {\n    return NgModule;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar TestingModuleOverride;\n\n(function (TestingModuleOverride) {\n  TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n  TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\n\nfunction isTestingModuleOverride(value) {\n  return value === TestingModuleOverride.DECLARATION || value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\n\nclass R3TestBedCompiler {\n  constructor(platform, additionalModuleTypes) {\n    this.platform = platform;\n    this.additionalModuleTypes = additionalModuleTypes;\n    this.originalComponentResolutionQueue = null; // Testing module configuration\n\n    this.declarations = [];\n    this.imports = [];\n    this.providers = [];\n    this.schemas = []; // Queues of components/directives/pipes that should be recompiled.\n\n    this.pendingComponents = new Set();\n    this.pendingDirectives = new Set();\n    this.pendingPipes = new Set(); // Keep track of all components and directives, so we can patch Providers onto defs later.\n\n    this.seenComponents = new Set();\n    this.seenDirectives = new Set(); // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n\n    this.overriddenModules = new Set(); // Store resolved styles for Components that have template overrides present and `styleUrls`\n    // defined at the same time.\n\n    this.existingComponentStyles = new Map();\n    this.resolvers = initResolvers();\n    this.componentToModuleScope = new Map(); // Map that keeps initial version of component/directive/pipe defs in case\n    // we compile a Type again, thus overriding respective static fields. This is\n    // required to make sure we restore defs to their initial states between test runs\n    // TODO: we should support the case with multiple defs on a type\n\n    this.initialNgDefs = new Map(); // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n    // defs in case TestBed makes changes to the originals.\n\n    this.defCleanupOps = [];\n    this._injector = null;\n    this.compilerProviders = null;\n    this.providerOverrides = [];\n    this.rootProviderOverrides = []; // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n    // module's provider list.\n\n    this.providerOverridesByModule = new Map();\n    this.providerOverridesByToken = new Map();\n    this.moduleProvidersOverridden = new Set();\n    this.testModuleRef = null;\n\n    class DynamicTestModule {}\n\n    this.testModuleType = DynamicTestModule;\n  }\n\n  setCompilerProviders(providers) {\n    this.compilerProviders = providers;\n    this._injector = null;\n  }\n\n  configureTestingModule(moduleDef) {\n    // Enqueue any compilation tasks for the directly declared component.\n    if (moduleDef.declarations !== undefined) {\n      this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n      this.declarations.push(...moduleDef.declarations);\n    } // Enqueue any compilation tasks for imported modules.\n\n\n    if (moduleDef.imports !== undefined) {\n      this.queueTypesFromModulesArray(moduleDef.imports);\n      this.imports.push(...moduleDef.imports);\n    }\n\n    if (moduleDef.providers !== undefined) {\n      this.providers.push(...moduleDef.providers);\n    }\n\n    if (moduleDef.schemas !== undefined) {\n      this.schemas.push(...moduleDef.schemas);\n    }\n  }\n\n  overrideModule(ngModule, override) {\n    this.overriddenModules.add(ngModule); // Compile the module right away.\n\n    this.resolvers.module.addOverride(ngModule, override);\n    const metadata = this.resolvers.module.resolve(ngModule);\n\n    if (metadata === null) {\n      throw invalidTypeError(ngModule.name, 'NgModule');\n    }\n\n    this.recompileNgModule(ngModule, metadata); // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n    // new declarations or imported modules. Ingest any possible new types and add them to the\n    // current queue.\n\n    this.queueTypesFromModulesArray([ngModule]);\n  }\n\n  overrideComponent(component, override) {\n    this.resolvers.component.addOverride(component, override);\n    this.pendingComponents.add(component);\n  }\n\n  overrideDirective(directive, override) {\n    this.resolvers.directive.addOverride(directive, override);\n    this.pendingDirectives.add(directive);\n  }\n\n  overridePipe(pipe, override) {\n    this.resolvers.pipe.addOverride(pipe, override);\n    this.pendingPipes.add(pipe);\n  }\n\n  overrideProvider(token, provider) {\n    let providerDef;\n\n    if (provider.useFactory !== undefined) {\n      providerDef = {\n        provide: token,\n        useFactory: provider.useFactory,\n        deps: provider.deps || [],\n        multi: provider.multi\n      };\n    } else if (provider.useValue !== undefined) {\n      providerDef = {\n        provide: token,\n        useValue: provider.useValue,\n        multi: provider.multi\n      };\n    } else {\n      providerDef = {\n        provide: token\n      };\n    }\n\n    const injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n    const providedIn = injectableDef === null ? null : resolveForwardRef(injectableDef.providedIn);\n    const overridesBucket = providedIn === 'root' ? this.rootProviderOverrides : this.providerOverrides;\n    overridesBucket.push(providerDef); // Keep overrides grouped by token as well for fast lookups using token\n\n    this.providerOverridesByToken.set(token, providerDef);\n\n    if (injectableDef !== null && providedIn !== null && typeof providedIn !== 'string') {\n      const existingOverrides = this.providerOverridesByModule.get(providedIn);\n\n      if (existingOverrides !== undefined) {\n        existingOverrides.push(providerDef);\n      } else {\n        this.providerOverridesByModule.set(providedIn, [providerDef]);\n      }\n    }\n  }\n\n  overrideTemplateUsingTestingModule(type, template) {\n    const def = type[ɵNG_COMP_DEF];\n\n    const hasStyleUrls = () => {\n      const metadata = this.resolvers.component.resolve(type);\n      return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n    };\n\n    const overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls(); // In Ivy, compiling a component does not require knowing the module providing the\n    // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n    // overrideComponent. Important: overriding template requires full Component re-compilation,\n    // which may fail in case styleUrls are also present (thus Component is considered as required\n    // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n    // preserve current styles available on Component def and restore styles back once compilation\n    // is complete.\n\n    const override = overrideStyleUrls ? {\n      template,\n      styles: [],\n      styleUrls: []\n    } : {\n      template\n    };\n    this.overrideComponent(type, {\n      set: override\n    });\n\n    if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n      this.existingComponentStyles.set(type, def.styles);\n    } // Set the component's scope to be the testing module.\n\n\n    this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n  }\n\n  compileComponents() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.clearComponentResolutionQueue(); // Run compilers for all queued types.\n\n\n      let needsAsyncResources = _this.compileTypesSync(); // compileComponents() should not be async unless it needs to be.\n\n\n      if (needsAsyncResources) {\n        let resourceLoader;\n\n        let resolver = url => {\n          if (!resourceLoader) {\n            resourceLoader = _this.injector.get(ResourceLoader);\n          }\n\n          return Promise.resolve(resourceLoader.get(url));\n        };\n\n        yield resolveComponentResources(resolver);\n      }\n    })();\n  }\n\n  finalize() {\n    // One last compile\n    this.compileTypesSync(); // Create the testing module itself.\n\n    this.compileTestModule();\n    this.applyTransitiveScopes();\n    this.applyProviderOverrides(); // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n    // Components have `styleUrls` fields defined and template override was requested.\n\n    this.patchComponentsWithExistingStyles(); // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n    // every component.\n\n    this.componentToModuleScope.clear();\n    const parentInjector = this.platform.injector;\n    this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector); // ApplicationInitStatus.runInitializers() is marked @internal to core.\n    // Cast it to any before accessing it.\n\n    this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers(); // Set locale ID after running app initializers, since locale information might be updated while\n    // running initializers. This is also consistent with the execution order while bootstrapping an\n    // app (see `packages/core/src/application_ref.ts` file).\n\n    const localeId = this.testModuleRef.injector.get(LOCALE_ID, ɵDEFAULT_LOCALE_ID);\n    ɵsetLocaleId(localeId);\n    return this.testModuleRef;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  _compileNgModuleSync(moduleType) {\n    this.queueTypesFromModulesArray([moduleType]);\n    this.compileTypesSync();\n    this.applyProviderOverrides();\n    this.applyProviderOverridesToModule(moduleType);\n    this.applyTransitiveScopes();\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  _compileNgModuleAsync(moduleType) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.queueTypesFromModulesArray([moduleType]);\n\n      yield _this2.compileComponents();\n\n      _this2.applyProviderOverrides();\n\n      _this2.applyProviderOverridesToModule(moduleType);\n\n      _this2.applyTransitiveScopes();\n    })();\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  _getModuleResolver() {\n    return this.resolvers.module;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  _getComponentFactories(moduleType) {\n    return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\n      const componentDef = declaration.ɵcmp;\n      componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, this.testModuleRef));\n      return factories;\n    }, []);\n  }\n\n  compileTypesSync() {\n    // Compile all queued components, directives, pipes.\n    let needsAsyncResources = false;\n    this.pendingComponents.forEach(declaration => {\n      needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n      const metadata = this.resolvers.component.resolve(declaration);\n\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Component');\n      }\n\n      this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n      ɵcompileComponent(declaration, metadata);\n    });\n    this.pendingComponents.clear();\n    this.pendingDirectives.forEach(declaration => {\n      const metadata = this.resolvers.directive.resolve(declaration);\n\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Directive');\n      }\n\n      this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n      ɵcompileDirective(declaration, metadata);\n    });\n    this.pendingDirectives.clear();\n    this.pendingPipes.forEach(declaration => {\n      const metadata = this.resolvers.pipe.resolve(declaration);\n\n      if (metadata === null) {\n        throw invalidTypeError(declaration.name, 'Pipe');\n      }\n\n      this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n      ɵcompilePipe(declaration, metadata);\n    });\n    this.pendingPipes.clear();\n    return needsAsyncResources;\n  }\n\n  applyTransitiveScopes() {\n    if (this.overriddenModules.size > 0) {\n      // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n      // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n      // collect all affected modules and reset scopes to force their re-calculation.\n      const testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\n      const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n\n      if (affectedModules.size > 0) {\n        affectedModules.forEach(moduleType => {\n          this.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\n          moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\n        });\n      }\n    }\n\n    const moduleToScope = new Map();\n\n    const getScopeOfModule = moduleType => {\n      if (!moduleToScope.has(moduleType)) {\n        const isTestingModule = isTestingModuleOverride(moduleType);\n        const realType = isTestingModule ? this.testModuleType : moduleType;\n        moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\n      }\n\n      return moduleToScope.get(moduleType);\n    };\n\n    this.componentToModuleScope.forEach((moduleType, componentType) => {\n      const moduleScope = getScopeOfModule(moduleType);\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs'); // `tView` that is stored on component def contains information about directives and pipes\n      // that are in the scope of this component. Patching component scope will cause `tView` to be\n      // changed. Store original `tView` before patching scope, so the `tView` (including scope\n      // information) is restored back to its previous/original state before running next test.\n\n      this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\n      ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n    });\n    this.componentToModuleScope.clear();\n  }\n\n  applyProviderOverrides() {\n    const maybeApplyOverrides = field => type => {\n      const resolver = field === ɵNG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\n      const metadata = resolver.resolve(type);\n\n      if (this.hasProviderOverrides(metadata.providers)) {\n        this.patchDefWithProviderOverrides(type, field);\n      }\n    };\n\n    this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n    this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n    this.seenComponents.clear();\n    this.seenDirectives.clear();\n  }\n\n  applyProviderOverridesToModule(moduleType) {\n    if (this.moduleProvidersOverridden.has(moduleType)) {\n      return;\n    }\n\n    this.moduleProvidersOverridden.add(moduleType);\n    const injectorDef = moduleType[ɵNG_INJ_DEF];\n\n    if (this.providerOverridesByToken.size > 0) {\n      const providers = [...injectorDef.providers, ...(this.providerOverridesByModule.get(moduleType) || [])];\n\n      if (this.hasProviderOverrides(providers)) {\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, moduleType);\n        this.storeFieldOfDefOnType(moduleType, ɵNG_INJ_DEF, 'providers');\n        injectorDef.providers = this.getOverriddenProviders(providers);\n      } // Apply provider overrides to imported modules recursively\n\n\n      const moduleDef = moduleType[ɵNG_MOD_DEF];\n      const imports = maybeUnwrapFn(moduleDef.imports);\n\n      for (const importedModule of imports) {\n        this.applyProviderOverridesToModule(importedModule);\n      } // Also override the providers on any ModuleWithProviders imports since those don't appear in\n      // the moduleDef.\n\n\n      for (const importedModule of flatten(injectorDef.imports)) {\n        if (isModuleWithProviders(importedModule)) {\n          this.defCleanupOps.push({\n            object: importedModule,\n            fieldName: 'providers',\n            originalValue: importedModule.providers\n          });\n          importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n        }\n      }\n    }\n  }\n\n  patchComponentsWithExistingStyles() {\n    this.existingComponentStyles.forEach((styles, type) => type[ɵNG_COMP_DEF].styles = styles);\n    this.existingComponentStyles.clear();\n  }\n\n  queueTypeArray(arr, moduleType) {\n    for (const value of arr) {\n      if (Array.isArray(value)) {\n        this.queueTypeArray(value, moduleType);\n      } else {\n        this.queueType(value, moduleType);\n      }\n    }\n  }\n\n  recompileNgModule(ngModule, metadata) {\n    // Cache the initial ngModuleDef as it will be overwritten.\n    this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n    this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n    ɵcompileNgModuleDefs(ngModule, metadata);\n  }\n\n  queueType(type, moduleType) {\n    const component = this.resolvers.component.resolve(type);\n\n    if (component) {\n      // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n      // missing. That might happen in case a class without any Angular decorators extends another\n      // class where Component/Directive/Pipe decorator is defined.\n      if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n        this.pendingComponents.add(type);\n      }\n\n      this.seenComponents.add(type); // Keep track of the module which declares this component, so later the component's scope\n      // can be set correctly. If the component has already been recorded here, then one of several\n      // cases is true:\n      // * the module containing the component was imported multiple times (common).\n      // * the component is declared in multiple modules (which is an error).\n      // * the component was in 'declarations' of the testing module, and also in an imported module\n      //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n      // * overrideTemplateUsingTestingModule was called for the component in which case the module\n      //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n      //\n      // If the component was previously in the testing module's 'declarations' (meaning the\n      // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n      // real module, which was imported. This pattern is understood to mean that the component\n      // should use its original scope, but that the testing module should also contain the\n      // component in its scope.\n\n      if (!this.componentToModuleScope.has(type) || this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\n        this.componentToModuleScope.set(type, moduleType);\n      }\n\n      return;\n    }\n\n    const directive = this.resolvers.directive.resolve(type);\n\n    if (directive) {\n      if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n        this.pendingDirectives.add(type);\n      }\n\n      this.seenDirectives.add(type);\n      return;\n    }\n\n    const pipe = this.resolvers.pipe.resolve(type);\n\n    if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n      this.pendingPipes.add(type);\n      return;\n    }\n  }\n\n  queueTypesFromModulesArray(arr) {\n    // Because we may encounter the same NgModule while processing the imports and exports of an\n    // NgModule tree, we cache them in this set so we can skip ones that have already been seen\n    // encountered. In some test setups, this caching resulted in 10X runtime improvement.\n    const processedNgModuleDefs = new Set();\n\n    const queueTypesFromModulesArrayRecur = arr => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          queueTypesFromModulesArrayRecur(value);\n        } else if (hasNgModuleDef(value)) {\n          const def = value.ɵmod;\n\n          if (processedNgModuleDefs.has(def)) {\n            continue;\n          }\n\n          processedNgModuleDefs.add(def); // Look through declarations, imports, and exports, and queue\n          // everything found there.\n\n          this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n          queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n        } else if (isModuleWithProviders(value)) {\n          queueTypesFromModulesArrayRecur([value.ngModule]);\n        }\n      }\n    };\n\n    queueTypesFromModulesArrayRecur(arr);\n  } // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n  // that import (even transitively) an overridden one. For all affected modules we need to\n  // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n  // of this function is to collect all affected modules in a set for further processing. Example:\n  // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n  // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n  // invalidated with the override.\n\n\n  collectModulesAffectedByOverrides(arr) {\n    const seenModules = new Set();\n    const affectedModules = new Set();\n\n    const calcAffectedModulesRecur = (arr, path) => {\n      for (const value of arr) {\n        if (Array.isArray(value)) {\n          // If the value is an array, just flatten it (by invoking this function recursively),\n          // keeping \"path\" the same.\n          calcAffectedModulesRecur(value, path);\n        } else if (hasNgModuleDef(value)) {\n          if (seenModules.has(value)) {\n            // If we've seen this module before and it's included into \"affected modules\" list, mark\n            // the whole path that leads to that module as affected, but do not descend into its\n            // imports, since we already examined them before.\n            if (affectedModules.has(value)) {\n              path.forEach(item => affectedModules.add(item));\n            }\n\n            continue;\n          }\n\n          seenModules.add(value);\n\n          if (this.overriddenModules.has(value)) {\n            path.forEach(item => affectedModules.add(item));\n          } // Examine module imports recursively to look for overridden modules.\n\n\n          const moduleDef = value[ɵNG_MOD_DEF];\n          calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n        }\n      }\n    };\n\n    calcAffectedModulesRecur(arr, []);\n    return affectedModules;\n  }\n\n  maybeStoreNgDef(prop, type) {\n    if (!this.initialNgDefs.has(type)) {\n      const currentDef = Object.getOwnPropertyDescriptor(type, prop);\n      this.initialNgDefs.set(type, [prop, currentDef]);\n    }\n  }\n\n  storeFieldOfDefOnType(type, defField, fieldName) {\n    const def = type[defField];\n    const originalValue = def[fieldName];\n    this.defCleanupOps.push({\n      object: def,\n      fieldName,\n      originalValue\n    });\n  }\n  /**\r\n   * Clears current components resolution queue, but stores the state of the queue, so we can\r\n   * restore it later. Clearing the queue is required before we try to compile components (via\r\n   * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\r\n   */\n\n\n  clearComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue === null) {\n      this.originalComponentResolutionQueue = new Map();\n    }\n\n    clearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));\n  }\n  /*\r\n   * Restores component resolution queue to the previously saved state. This operation is performed\r\n   * as a part of restoring the state after completion of the current set of tests (that might\r\n   * potentially mutate the state).\r\n   */\n\n\n  restoreComponentResolutionQueue() {\n    if (this.originalComponentResolutionQueue !== null) {\n      restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n      this.originalComponentResolutionQueue = null;\n    }\n  }\n\n  restoreOriginalState() {\n    // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n    // case there were multiple overrides for the same field).\n    forEachRight(this.defCleanupOps, op => {\n      op.object[op.fieldName] = op.originalValue;\n    }); // Restore initial component/directive/pipe defs\n\n    this.initialNgDefs.forEach((value, type) => {\n      const [prop, descriptor] = value;\n\n      if (!descriptor) {\n        // Delete operations are generally undesirable since they have performance implications\n        // on objects they were applied to. In this particular case, situations where this code\n        // is invoked should be quite rare to cause any noticeable impact, since it's applied\n        // only to some test cases (for example when class with no annotations extends some\n        // @Component) when we need to clear 'ɵcmp' field on a given class to restore\n        // its original state (before applying overrides and running tests).\n        delete type[prop];\n      } else {\n        Object.defineProperty(type, prop, descriptor);\n      }\n    });\n    this.initialNgDefs.clear();\n    this.moduleProvidersOverridden.clear();\n    this.restoreComponentResolutionQueue(); // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n\n    ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n  }\n\n  compileTestModule() {\n    class RootScopeModule {}\n\n    ɵcompileNgModuleDefs(RootScopeModule, {\n      providers: [...this.rootProviderOverrides]\n    });\n    const ngZone = new NgZone({\n      enableLongStackTrace: true\n    });\n    const providers = [{\n      provide: NgZone,\n      useValue: ngZone\n    }, {\n      provide: Compiler,\n      useFactory: () => new R3TestCompiler(this)\n    }, ...this.providers, ...this.providerOverrides];\n    const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []]; // clang-format off\n\n    ɵcompileNgModuleDefs(this.testModuleType, {\n      declarations: this.declarations,\n      imports,\n      schemas: this.schemas,\n      providers\n    },\n    /* allowDuplicateDeclarationsInRoot */\n    true); // clang-format on\n\n    this.applyProviderOverridesToModule(this.testModuleType);\n  }\n\n  get injector() {\n    if (this._injector !== null) {\n      return this._injector;\n    }\n\n    const providers = [];\n    const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n    compilerOptions.forEach(opts => {\n      if (opts.providers) {\n        providers.push(opts.providers);\n      }\n    });\n\n    if (this.compilerProviders !== null) {\n      providers.push(...this.compilerProviders);\n    } // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n\n\n    class CompilerModule {}\n\n    ɵcompileNgModuleDefs(CompilerModule, {\n      providers\n    });\n    const CompilerModuleFactory = new ɵNgModuleFactory(CompilerModule);\n    this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n    return this._injector;\n  } // get overrides for a specific provider (if any)\n\n\n  getSingleProviderOverrides(provider) {\n    const token = getProviderToken(provider);\n    return this.providerOverridesByToken.get(token) || null;\n  }\n\n  getProviderOverrides(providers) {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return []; // There are two flattening operations here. The inner flatten() operates on the metadata's\n    // providers and applies a mapping function which retrieves overrides for each incoming\n    // provider. The outer flatten() then flattens the produced overrides array. If this is not\n    // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n    // providers array and contaminate any error messages that might be generated.\n\n    return flatten(flatten(providers, provider => this.getSingleProviderOverrides(provider) || []));\n  }\n\n  getOverriddenProviders(providers) {\n    if (!providers || !providers.length || this.providerOverridesByToken.size === 0) return [];\n    const flattenedProviders = flatten(providers);\n    const overrides = this.getProviderOverrides(flattenedProviders);\n    const overriddenProviders = [...flattenedProviders, ...overrides];\n    const final = [];\n    const seenOverriddenProviders = new Set(); // We iterate through the list of providers in reverse order to make sure provider overrides\n    // take precedence over the values defined in provider list. We also filter out all providers\n    // that have overrides, keeping overridden values only. This is needed, since presence of a\n    // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n\n    forEachRight(overriddenProviders, provider => {\n      const token = getProviderToken(provider);\n\n      if (this.providerOverridesByToken.has(token)) {\n        if (!seenOverriddenProviders.has(token)) {\n          seenOverriddenProviders.add(token); // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n          // make sure that provided override takes highest precedence and is not combined with\n          // other instances of the same multi provider.\n\n          final.unshift({ ...provider,\n            multi: false\n          });\n        }\n      } else {\n        final.unshift(provider);\n      }\n    });\n    return final;\n  }\n\n  hasProviderOverrides(providers) {\n    return this.getProviderOverrides(providers).length > 0;\n  }\n\n  patchDefWithProviderOverrides(declaration, field) {\n    const def = declaration[field];\n\n    if (def && def.providersResolver) {\n      this.maybeStoreNgDef(field, declaration);\n      const resolver = def.providersResolver;\n\n      const processProvidersFn = providers => this.getOverriddenProviders(providers);\n\n      this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n\n      def.providersResolver = ngDef => resolver(ngDef, processProvidersFn);\n    }\n  }\n\n}\n\nfunction initResolvers() {\n  return {\n    module: new NgModuleResolver(),\n    component: new ComponentResolver(),\n    directive: new DirectiveResolver(),\n    pipe: new PipeResolver()\n  };\n}\n\nfunction hasNgModuleDef(value) {\n  return value.hasOwnProperty('ɵmod');\n}\n\nfunction maybeUnwrapFn(maybeFn) {\n  return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\n\nfunction flatten(values, mapFn) {\n  const out = [];\n  values.forEach(value => {\n    if (Array.isArray(value)) {\n      out.push(...flatten(value, mapFn));\n    } else {\n      out.push(mapFn ? mapFn(value) : value);\n    }\n  });\n  return out;\n}\n\nfunction getProviderField(provider, field) {\n  return provider && typeof provider === 'object' && provider[field];\n}\n\nfunction getProviderToken(provider) {\n  return getProviderField(provider, 'provide') || provider;\n}\n\nfunction isModuleWithProviders(value) {\n  return value.hasOwnProperty('ngModule');\n}\n\nfunction forEachRight(values, fn) {\n  for (let idx = values.length - 1; idx >= 0; idx--) {\n    fn(values[idx], idx);\n  }\n}\n\nfunction invalidTypeError(name, expectedType) {\n  return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\n}\n\nclass R3TestCompiler {\n  constructor(testBed) {\n    this.testBed = testBed;\n  }\n\n  compileModuleSync(moduleType) {\n    this.testBed._compileNgModuleSync(moduleType);\n\n    return new ɵNgModuleFactory(moduleType);\n  }\n\n  compileModuleAsync(moduleType) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.testBed._compileNgModuleAsync(moduleType);\n      return new ɵNgModuleFactory(moduleType);\n    })();\n  }\n\n  compileModuleAndAllComponentsSync(moduleType) {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n\n    const componentFactories = this.testBed._getComponentFactories(moduleType);\n\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n\n  compileModuleAndAllComponentsAsync(moduleType) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const ngModuleFactory = yield _this4.compileModuleAsync(moduleType);\n\n      const componentFactories = _this4.testBed._getComponentFactories(moduleType);\n\n      return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    })();\n  }\n\n  clearCache() {}\n\n  clearCacheFor(type) {}\n\n  getModuleId(moduleType) {\n    const meta = this.testBed._getModuleResolver().resolve(moduleType);\n\n    return meta && meta.id || undefined;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Whether test modules should be torn down by default. */\n\n\nconst TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT = true;\n/**\r\n * An abstract class for inserting the root test component element in a platform independent way.\r\n *\r\n * @publicApi\r\n */\n\nclass TestComponentRenderer {\n  insertRootElement(rootElementId) {}\n\n  removeAllRootElements() {}\n\n}\n/**\r\n * @publicApi\r\n */\n\n\nconst ComponentFixtureAutoDetect = new InjectionToken('ComponentFixtureAutoDetect');\n/**\r\n * @publicApi\r\n */\n\nconst ComponentFixtureNoNgZone = new InjectionToken('ComponentFixtureNoNgZone');\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nlet _nextRootElementId = 0;\n/**\r\n * @description\r\n * Configures and initializes environment for unit testing and provides methods for\r\n * creating components and services in unit tests.\r\n *\r\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\r\n *\r\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\r\n * according to the compiler used.\r\n */\n\nclass TestBedRender3 {\n  constructor() {\n    // Properties\n    this.platform = null;\n    this.ngModule = null;\n    this._compiler = null;\n    this._testModuleRef = null;\n    this._activeFixtures = [];\n    this._globalCompilationChecked = false;\n  }\n  /**\r\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\r\n   * angular module. These are common to every test in the suite.\r\n   *\r\n   * This may only be called once, to set up the common providers for the current test\r\n   * suite on the current platform. If you absolutely need to change the providers,\r\n   * first use `resetTestEnvironment`.\r\n   *\r\n   * Test modules and platforms for individual platforms are available from\r\n   * '@angular/<platform_name>/testing'.\r\n   *\r\n   * @publicApi\r\n   */\n\n\n  static initTestEnvironment(ngModule, platform, summariesOrOptions) {\n    const testBed = _getTestBedRender3();\n\n    testBed.initTestEnvironment(ngModule, platform, summariesOrOptions);\n    return testBed;\n  }\n  /**\r\n   * Reset the providers for the test injector.\r\n   *\r\n   * @publicApi\r\n   */\n\n\n  static resetTestEnvironment() {\n    _getTestBedRender3().resetTestEnvironment();\n  }\n\n  static configureCompiler(config) {\n    _getTestBedRender3().configureCompiler(config);\n\n    return TestBedRender3;\n  }\n  /**\r\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\r\n   * which are defined in test_injector.js\r\n   */\n\n\n  static configureTestingModule(moduleDef) {\n    _getTestBedRender3().configureTestingModule(moduleDef);\n\n    return TestBedRender3;\n  }\n  /**\r\n   * Compile components with a `templateUrl` for the test's NgModule.\r\n   * It is necessary to call this function\r\n   * as fetching urls is asynchronous.\r\n   */\n\n\n  static compileComponents() {\n    return _getTestBedRender3().compileComponents();\n  }\n\n  static overrideModule(ngModule, override) {\n    _getTestBedRender3().overrideModule(ngModule, override);\n\n    return TestBedRender3;\n  }\n\n  static overrideComponent(component, override) {\n    _getTestBedRender3().overrideComponent(component, override);\n\n    return TestBedRender3;\n  }\n\n  static overrideDirective(directive, override) {\n    _getTestBedRender3().overrideDirective(directive, override);\n\n    return TestBedRender3;\n  }\n\n  static overridePipe(pipe, override) {\n    _getTestBedRender3().overridePipe(pipe, override);\n\n    return TestBedRender3;\n  }\n\n  static overrideTemplate(component, template) {\n    _getTestBedRender3().overrideComponent(component, {\n      set: {\n        template,\n        templateUrl: null\n      }\n    });\n\n    return TestBedRender3;\n  }\n  /**\r\n   * Overrides the template of the given component, compiling the template\r\n   * in the context of the TestingModule.\r\n   *\r\n   * Note: This works for JIT and AOTed components as well.\r\n   */\n\n\n  static overrideTemplateUsingTestingModule(component, template) {\n    _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n\n    return TestBedRender3;\n  }\n\n  static overrideProvider(token, provider) {\n    _getTestBedRender3().overrideProvider(token, provider);\n\n    return TestBedRender3;\n  }\n\n  static inject(token, notFoundValue, flags) {\n    return _getTestBedRender3().inject(token, notFoundValue, flags);\n  }\n  /** @deprecated from v9.0.0 use TestBed.inject */\n\n\n  static get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n    return _getTestBedRender3().inject(token, notFoundValue, flags);\n  }\n\n  static createComponent(component) {\n    return _getTestBedRender3().createComponent(component);\n  }\n\n  static resetTestingModule() {\n    _getTestBedRender3().resetTestingModule();\n\n    return TestBedRender3;\n  }\n\n  static shouldTearDownTestingModule() {\n    return _getTestBedRender3().shouldTearDownTestingModule();\n  }\n\n  static tearDownTestingModule() {\n    _getTestBedRender3().tearDownTestingModule();\n  }\n  /**\r\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\r\n   * angular module. These are common to every test in the suite.\r\n   *\r\n   * This may only be called once, to set up the common providers for the current test\r\n   * suite on the current platform. If you absolutely need to change the providers,\r\n   * first use `resetTestEnvironment`.\r\n   *\r\n   * Test modules and platforms for individual platforms are available from\r\n   * '@angular/<platform_name>/testing'.\r\n   *\r\n   * @publicApi\r\n   */\n\n\n  initTestEnvironment(ngModule, platform, summariesOrOptions) {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    } // If `summariesOrOptions` is a function, it means that it's\n    // an AOT summaries factory which Ivy doesn't support.\n\n\n    TestBedRender3._environmentTeardownOptions = typeof summariesOrOptions === 'function' ? undefined : summariesOrOptions?.teardown;\n    this.platform = platform;\n    this.ngModule = ngModule;\n    this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n  }\n  /**\r\n   * Reset the providers for the test injector.\r\n   *\r\n   * @publicApi\r\n   */\n\n\n  resetTestEnvironment() {\n    this.resetTestingModule();\n    this._compiler = null;\n    this.platform = null;\n    this.ngModule = null;\n    TestBedRender3._environmentTeardownOptions = undefined;\n  }\n\n  resetTestingModule() {\n    this.checkGlobalCompilationFinished();\n    ɵresetCompiledComponents();\n\n    if (this._compiler !== null) {\n      this.compiler.restoreOriginalState();\n    }\n\n    this._compiler = new R3TestBedCompiler(this.platform, this.ngModule); // We have to chain a couple of try/finally blocks, because each step can\n    // throw errors and we don't want it to interrupt the next step and we also\n    // want an error to be thrown at the end.\n\n    try {\n      this.destroyActiveFixtures();\n    } finally {\n      try {\n        if (this.shouldTearDownTestingModule()) {\n          this.tearDownTestingModule();\n        }\n      } finally {\n        this._testModuleRef = null;\n        this._instanceTeardownOptions = undefined;\n      }\n    }\n  }\n\n  configureCompiler(config) {\n    if (config.useJit != null) {\n      throw new Error('the Render3 compiler JiT mode is not configurable !');\n    }\n\n    if (config.providers !== undefined) {\n      this.compiler.setCompilerProviders(config.providers);\n    }\n  }\n\n  configureTestingModule(moduleDef) {\n    this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module'); // Always re-assign the teardown options, even if they're undefined.\n    // This ensures that we don't carry the options between tests.\n\n    this._instanceTeardownOptions = moduleDef.teardown;\n    this.compiler.configureTestingModule(moduleDef);\n  }\n\n  compileComponents() {\n    return this.compiler.compileComponents();\n  }\n\n  inject(token, notFoundValue, flags) {\n    if (token === TestBedRender3) {\n      return this;\n    }\n\n    const UNDEFINED = {};\n    const result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n    return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) : result;\n  }\n  /** @deprecated from v9.0.0 use TestBed.inject */\n\n\n  get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n    return this.inject(token, notFoundValue, flags);\n  }\n\n  execute(tokens, fn, context) {\n    const params = tokens.map(t => this.inject(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule, override) {\n    this.assertNotInstantiated('overrideModule', 'override module metadata');\n    this.compiler.overrideModule(ngModule, override);\n  }\n\n  overrideComponent(component, override) {\n    this.assertNotInstantiated('overrideComponent', 'override component metadata');\n    this.compiler.overrideComponent(component, override);\n  }\n\n  overrideTemplateUsingTestingModule(component, template) {\n    this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n    this.compiler.overrideTemplateUsingTestingModule(component, template);\n  }\n\n  overrideDirective(directive, override) {\n    this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this.compiler.overrideDirective(directive, override);\n  }\n\n  overridePipe(pipe, override) {\n    this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this.compiler.overridePipe(pipe, override);\n  }\n  /**\r\n   * Overwrites all providers for the given token with the given provider definition.\r\n   */\n\n\n  overrideProvider(token, provider) {\n    this.assertNotInstantiated('overrideProvider', 'override provider');\n    this.compiler.overrideProvider(token, provider);\n  }\n\n  createComponent(type) {\n    const testComponentRenderer = this.inject(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n    const componentDef = type.ɵcmp;\n\n    if (!componentDef) {\n      throw new Error(`It looks like '${ɵstringify(type)}' has not been IVY compiled - it has no 'ɵcmp' field`);\n    } // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n\n\n    const noNgZone = this.inject(ComponentFixtureNoNgZone, false); // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n\n    const autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n    const ngZone = noNgZone ? null : this.inject(NgZone, null);\n    const componentFactory = new ɵRender3ComponentFactory(componentDef);\n\n    const initComponent = () => {\n      const componentRef = componentFactory.create(Injector.NULL, [], `#${rootElId}`, this.testModuleRef);\n      return new ComponentFixture(componentRef, ngZone, autoDetect);\n    };\n\n    const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n\n    this._activeFixtures.push(fixture);\n\n    return fixture;\n  }\n  /**\r\n   * @internal strip this from published d.ts files due to\r\n   * https://github.com/microsoft/TypeScript/issues/36216\r\n   */\n\n\n  get compiler() {\n    if (this._compiler === null) {\n      throw new Error(`Need to call TestBed.initTestEnvironment() first`);\n    }\n\n    return this._compiler;\n  }\n  /**\r\n   * @internal strip this from published d.ts files due to\r\n   * https://github.com/microsoft/TypeScript/issues/36216\r\n   */\n\n\n  get testModuleRef() {\n    if (this._testModuleRef === null) {\n      this._testModuleRef = this.compiler.finalize();\n    }\n\n    return this._testModuleRef;\n  }\n\n  assertNotInstantiated(methodName, methodDescription) {\n    if (this._testModuleRef !== null) {\n      throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` + `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n  /**\r\n   * Check whether the module scoping queue should be flushed, and flush it if needed.\r\n   *\r\n   * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\r\n   * in-progress module compilation. This creates a potential hazard - the very first time the\r\n   * TestBed is initialized (or if it's reset without being initialized), there may be pending\r\n   * compilations of modules declared in global scope. These compilations should be finished.\r\n   *\r\n   * To ensure that globally declared modules have their components scoped properly, this function\r\n   * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\r\n   * to any other operations, the scoping queue is flushed.\r\n   */\n\n\n  checkGlobalCompilationFinished() {\n    // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n    // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n    if (!this._globalCompilationChecked && this._testModuleRef === null) {\n      ɵflushModuleScopingQueueAsMuchAsPossible();\n    }\n\n    this._globalCompilationChecked = true;\n  }\n\n  destroyActiveFixtures() {\n    let errorCount = 0;\n\n    this._activeFixtures.forEach(fixture => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        errorCount++;\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e\n        });\n      }\n    });\n\n    this._activeFixtures = [];\n\n    if (errorCount > 0 && this.shouldRethrowTeardownErrors()) {\n      throw Error(`${errorCount} ${errorCount === 1 ? 'component' : 'components'} ` + `threw errors during cleanup`);\n    }\n  }\n\n  shouldRethrowTeardownErrors() {\n    const instanceOptions = this._instanceTeardownOptions;\n    const environmentOptions = TestBedRender3._environmentTeardownOptions; // If the new teardown behavior hasn't been configured, preserve the old behavior.\n\n    if (!instanceOptions && !environmentOptions) {\n      return TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n    } // Otherwise use the configured behavior or default to rethrowing.\n\n\n    return instanceOptions?.rethrowErrors ?? environmentOptions?.rethrowErrors ?? this.shouldTearDownTestingModule();\n  }\n\n  shouldTearDownTestingModule() {\n    return this._instanceTeardownOptions?.destroyAfterEach ?? TestBedRender3._environmentTeardownOptions?.destroyAfterEach ?? TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\n  }\n\n  tearDownTestingModule() {\n    // If the module ref has already been destroyed, we won't be able to get a test renderer.\n    if (this._testModuleRef === null) {\n      return;\n    } // Resolve the renderer ahead of time, because we want to remove the root elements as the very\n    // last step, but the injector will be destroyed as a part of the module ref destruction.\n\n\n    const testRenderer = this.inject(TestComponentRenderer);\n\n    try {\n      this._testModuleRef.destroy();\n    } catch (e) {\n      if (this.shouldRethrowTeardownErrors()) {\n        throw e;\n      } else {\n        console.error('Error during cleanup of a testing module', {\n          component: this._testModuleRef.instance,\n          stacktrace: e\n        });\n      }\n    } finally {\n      testRenderer.removeAllRootElements?.();\n    }\n  }\n\n}\n\nlet testBed;\n\nfunction _getTestBedRender3() {\n  return testBed = testBed || new TestBedRender3();\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @description\r\n * Configures and initializes environment for unit testing and provides methods for\r\n * creating components and services in unit tests.\r\n *\r\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\r\n *\r\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\r\n * according to the compiler used.\r\n *\r\n * @publicApi\r\n */\n\n\nconst TestBed = TestBedRender3;\n/**\r\n * Returns a singleton of the applicable `TestBed`.\r\n *\r\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\r\n *\r\n * @publicApi\r\n */\n\nconst getTestBed = _getTestBedRender3;\n/**\r\n * Allows injecting dependencies in `beforeEach()` and `it()`.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\r\n *   // some code that uses `dep` and `object`\r\n *   // ...\r\n * }));\r\n *\r\n * it('...', inject([AClass], (object) => {\r\n *   object.doSomething();\r\n *   expect(...);\r\n * })\r\n * ```\r\n *\r\n * @publicApi\r\n */\n\nfunction inject(tokens, fn) {\n  const testBed = getTestBed(); // Not using an arrow function to preserve context passed from call site\n\n  return function () {\n    return testBed.execute(tokens, fn, this);\n  };\n}\n/**\r\n * @publicApi\r\n */\n\n\nclass InjectSetupWrapper {\n  constructor(_moduleDef) {\n    this._moduleDef = _moduleDef;\n  }\n\n  _addModule() {\n    const moduleDef = this._moduleDef();\n\n    if (moduleDef) {\n      getTestBed().configureTestingModule(moduleDef);\n    }\n  }\n\n  inject(tokens, fn) {\n    const self = this; // Not using an arrow function to preserve context passed from call site\n\n    return function () {\n      self._addModule();\n\n      return inject(tokens, fn).call(this);\n    };\n  }\n\n}\n\nfunction withModule(moduleDef, fn) {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n      const testBed = getTestBed();\n\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n\n      return fn.apply(this);\n    };\n  }\n\n  return new InjectSetupWrapper(() => moduleDef);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _global = typeof window === 'undefined' ? global : window; // Reset the test providers and the fake async zone before each test.\n\n\nif (_global.beforeEach) {\n  _global.beforeEach(getCleanupHook(false));\n} // We provide both a `beforeEach` and `afterEach`, because the updated behavior for\n// tearing down the module is supposed to run after the test so that we can associate\n// teardown errors with the correct test.\n\n\nif (_global.afterEach) {\n  _global.afterEach(getCleanupHook(true));\n}\n\nfunction getCleanupHook(expectedTeardownValue) {\n  return () => {\n    // TODO(alxhub): find a better type here\n    if (TestBed.shouldTearDownTestingModule() === expectedTeardownValue) {\n      TestBed.resetTestingModule();\n      resetFakeAsyncZone();\n    }\n  };\n}\n/**\r\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\r\n * investigation.\r\n *\r\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\r\n *\r\n * @codeGenApi\r\n */\n// TODO(iminar): Remove this code in a safe way.\n\n\nconst __core_private_testing_placeholder__ = '';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider };","map":{"version":3,"sources":["D:/Documents/GitHub/Angular-API/API-REST/frontend/node_modules/@angular/core/fesm2020/testing.mjs"],"names":["getDebugNode","RendererFactory2","ɵstringify","ɵReflectionCapabilities","Directive","Component","Pipe","NgModule","ɵgetInjectableDef","resolveForwardRef","ɵNG_COMP_DEF","ɵRender3NgModuleRef","ApplicationInitStatus","LOCALE_ID","ɵDEFAULT_LOCALE_ID","ɵsetLocaleId","ɵRender3ComponentFactory","ɵcompileComponent","ɵNG_DIR_DEF","ɵcompileDirective","ɵNG_PIPE_DEF","ɵcompilePipe","ɵNG_MOD_DEF","ɵtransitiveScopesFor","ɵpatchComponentDefWithScope","ɵNG_INJ_DEF","ɵcompileNgModuleDefs","NgZone","Compiler","COMPILER_OPTIONS","ɵNgModuleFactory","ModuleWithComponentFactories","InjectionToken","Injector","InjectFlags","ɵresetCompiledComponents","ɵflushModuleScopingQueueAsMuchAsPossible","ResourceLoader","waitForAsync","fn","_Zone","Zone","Promise","reject","asyncTest","__symbol__","async","ComponentFixture","constructor","componentRef","ngZone","_autoDetect","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","error","_tick","checkNoChanges","run","autoDetectChanges","autoDetect","Error","isStable","whenStable","resolve","res","_getRenderer","_renderer","undefined","injector","get","whenRenderingDone","renderer","destroy","unsubscribe","current","fakeAsyncTestModule","fakeAsyncTestModuleNotLoadedErrorMessage","resetFakeAsyncZone","fakeAsync","tick","millis","tickOptions","processNewMacroTasksSynchronously","flush","maxTurns","discardPeriodicTasks","flushMicrotasks","resolveComponentResources","resourceResolver","componentResolved","urlMap","Map","cachedResourceResolve","url","promise","resp","set","then","unwrapResponse","componentResourceResolutionQueue","forEach","component","type","promises","templateUrl","push","template","styleUrls","styles","styleOffset","length","styleUrl","index","style","splice","indexOf","fullyResolved","all","componentDefResolved","clearResolutionOfComponentResourcesQueue","componentDefPendingResolution","Set","maybeQueueResolutionOfComponentResources","metadata","componentNeedsResolution","add","isComponentDefPendingResolution","has","hasOwnProperty","old","restoreComponentResolutionQueue","queue","clear","_","isComponentResourceResolutionQueueEmpty","size","response","text","delete","_nextReferenceId","MetadataOverrider","_references","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","prop","remove","setMetadata","removeMetadata","addMetadata","references","removeObjects","removeValue","Array","isArray","value","_propHashKey","propValue","filter","addValue","concat","propName","nextObjectId","objectIds","replacer","key","_serializeReference","JSON","stringify","ref","id","obj","Object","keys","startsWith","proto","getPrototypeOf","protoProp","desc","getOwnPropertyDescriptor","reflection","OverrideResolver","overrides","resolved","addOverride","setOverrides","getAnnotation","annotations","i","annotation","isKnownType","overrider","DirectiveResolver","ComponentResolver","PipeResolver","NgModuleResolver","TestingModuleOverride","isTestingModuleOverride","DECLARATION","OVERRIDE_TEMPLATE","R3TestBedCompiler","platform","additionalModuleTypes","originalComponentResolutionQueue","declarations","imports","providers","schemas","pendingComponents","pendingDirectives","pendingPipes","seenComponents","seenDirectives","overriddenModules","existingComponentStyles","resolvers","initResolvers","componentToModuleScope","initialNgDefs","defCleanupOps","_injector","compilerProviders","providerOverrides","rootProviderOverrides","providerOverridesByModule","providerOverridesByToken","moduleProvidersOverridden","testModuleRef","DynamicTestModule","testModuleType","setCompilerProviders","configureTestingModule","moduleDef","queueTypeArray","queueTypesFromModulesArray","overrideModule","ngModule","module","invalidTypeError","name","recompileNgModule","overrideComponent","overrideDirective","directive","overridePipe","pipe","overrideProvider","token","provider","providerDef","useFactory","provide","deps","multi","useValue","injectableDef","providedIn","overridesBucket","existingOverrides","overrideTemplateUsingTestingModule","def","hasStyleUrls","overrideStyleUrls","compileComponents","clearComponentResolutionQueue","needsAsyncResources","compileTypesSync","resourceLoader","resolver","finalize","compileTestModule","applyTransitiveScopes","applyProviderOverrides","patchComponentsWithExistingStyles","parentInjector","runInitializers","localeId","_compileNgModuleSync","moduleType","applyProviderOverridesToModule","_compileNgModuleAsync","_getModuleResolver","_getComponentFactories","maybeUnwrapFn","ɵmod","reduce","factories","declaration","componentDef","ɵcmp","maybeStoreNgDef","testingModuleDef","affectedModules","collectModulesAffectedByOverrides","storeFieldOfDefOnType","transitiveCompileScopes","moduleToScope","getScopeOfModule","isTestingModule","realType","componentType","moduleScope","maybeApplyOverrides","field","hasProviderOverrides","patchDefWithProviderOverrides","injectorDef","getOverriddenProviders","importedModule","flatten","isModuleWithProviders","object","fieldName","originalValue","arr","queueType","processedNgModuleDefs","queueTypesFromModulesArrayRecur","hasNgModuleDef","exports","seenModules","calcAffectedModulesRecur","path","item","currentDef","defField","restoreOriginalState","forEachRight","op","descriptor","defineProperty","RootScopeModule","enableLongStackTrace","R3TestCompiler","compilerOptions","opts","CompilerModule","CompilerModuleFactory","create","getSingleProviderOverrides","getProviderToken","getProviderOverrides","flattenedProviders","overriddenProviders","final","seenOverriddenProviders","unshift","providersResolver","processProvidersFn","ngDef","maybeFn","Function","values","mapFn","out","getProviderField","idx","expectedType","testBed","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","ngModuleFactory","componentFactories","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","meta","TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT","TestComponentRenderer","insertRootElement","rootElementId","removeAllRootElements","ComponentFixtureAutoDetect","ComponentFixtureNoNgZone","_nextRootElementId","TestBedRender3","_compiler","_testModuleRef","_activeFixtures","_globalCompilationChecked","initTestEnvironment","summariesOrOptions","_getTestBedRender3","resetTestEnvironment","configureCompiler","config","overrideTemplate","inject","notFoundValue","flags","THROW_IF_NOT_FOUND","Default","createComponent","resetTestingModule","shouldTearDownTestingModule","tearDownTestingModule","_environmentTeardownOptions","teardown","checkGlobalCompilationFinished","compiler","destroyActiveFixtures","_instanceTeardownOptions","useJit","assertNotInstantiated","UNDEFINED","result","execute","tokens","context","params","map","t","apply","testComponentRenderer","rootElId","noNgZone","componentFactory","initComponent","NULL","fixture","methodName","methodDescription","errorCount","e","console","stacktrace","shouldRethrowTeardownErrors","instanceOptions","environmentOptions","rethrowErrors","destroyAfterEach","testRenderer","TestBed","getTestBed","InjectSetupWrapper","_moduleDef","_addModule","self","call","withModule","_global","window","global","beforeEach","getCleanupHook","afterEach","expectedTeardownValue","__core_private_testing_placeholder__","ɵMetadataOverrider"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,IAAT,CAAcC,MAAM,GAAG,CAAvB,EAA0BC,WAAW,GAAG;AACpCC,EAAAA,iCAAiC,EAAE;AADC,CAAxC,EAEG;AACC,MAAIP,mBAAJ,EAAyB;AACrB,WAAOA,mBAAmB,CAACI,IAApB,CAAyBC,MAAzB,EAAiCC,WAAjC,CAAP;AACH;;AACD,QAAM,IAAIrB,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,KAAT,CAAeC,QAAf,EAAyB;AACrB,MAAIT,mBAAJ,EAAyB;AACrB,WAAOA,mBAAmB,CAACQ,KAApB,CAA0BC,QAA1B,CAAP;AACH;;AACD,QAAM,IAAIxB,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASS,oBAAT,GAAgC;AAC5B,MAAIV,mBAAJ,EAAyB;AACrB,WAAOA,mBAAmB,CAACU,oBAApB,EAAP;AACH;;AACD,QAAM,IAAIzB,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASU,eAAT,GAA2B;AACvB,MAAIX,mBAAJ,EAAyB;AACrB,WAAOA,mBAAmB,CAACW,eAApB,EAAP;AACH;;AACD,QAAM,IAAI1B,KAAJ,CAAUgB,wCAAV,CAAN;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,yBAAT,CAAmCC,gBAAnC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","sourcesContent":["/**\r\n * @license Angular v13.0.3\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { getDebugNode, RendererFactory2, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetInjectableDef, resolveForwardRef, ɵNG_COMP_DEF, ɵRender3NgModuleRef, ApplicationInitStatus, LOCALE_ID, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵNG_MOD_DEF, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵcompileNgModuleDefs, NgZone, Compiler, COMPILER_OPTIONS, ɵNgModuleFactory, ModuleWithComponentFactories, InjectionToken, Injector, InjectFlags, ɵresetCompiledComponents, ɵflushModuleScopingQueueAsMuchAsPossible } from '@angular/core';\r\nimport { ResourceLoader } from '@angular/compiler';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Wraps a test function in an asynchronous test zone. The test will automatically\r\n * complete when all asynchronous calls within this zone are done. Can be used\r\n * to wrap an {@link inject} call.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * it('...', waitForAsync(inject([AClass], (object) => {\r\n *   object.doSomething.then(() => {\r\n *     expect(...);\r\n *   })\r\n * });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction waitForAsync(fn) {\r\n    const _Zone = typeof Zone !== 'undefined' ? Zone : null;\r\n    if (!_Zone) {\r\n        return function () {\r\n            return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' +\r\n                'Please make sure that your environment includes zone.js');\r\n        };\r\n    }\r\n    const asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\r\n    if (typeof asyncTest === 'function') {\r\n        return asyncTest(fn);\r\n    }\r\n    return function () {\r\n        return Promise.reject('zone-testing.js is needed for the async() test helper but could not be found. ' +\r\n            'Please make sure that your environment includes zone.js/testing');\r\n    };\r\n}\r\n/**\r\n * @deprecated use `waitForAsync()`, (expected removal in v12)\r\n * @see {@link waitForAsync}\r\n * @publicApi\r\n * */\r\nfunction async(fn) {\r\n    return waitForAsync(fn);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Fixture for debugging and testing a component.\r\n *\r\n * @publicApi\r\n */\r\nclass ComponentFixture {\r\n    constructor(componentRef, ngZone, _autoDetect) {\r\n        this.componentRef = componentRef;\r\n        this.ngZone = ngZone;\r\n        this._autoDetect = _autoDetect;\r\n        this._isStable = true;\r\n        this._isDestroyed = false;\r\n        this._resolve = null;\r\n        this._promise = null;\r\n        this._onUnstableSubscription = null;\r\n        this._onStableSubscription = null;\r\n        this._onMicrotaskEmptySubscription = null;\r\n        this._onErrorSubscription = null;\r\n        this.changeDetectorRef = componentRef.changeDetectorRef;\r\n        this.elementRef = componentRef.location;\r\n        this.debugElement = getDebugNode(this.elementRef.nativeElement);\r\n        this.componentInstance = componentRef.instance;\r\n        this.nativeElement = this.elementRef.nativeElement;\r\n        this.componentRef = componentRef;\r\n        this.ngZone = ngZone;\r\n        if (ngZone) {\r\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\r\n            // of NgZone.\r\n            ngZone.runOutsideAngular(() => {\r\n                this._onUnstableSubscription = ngZone.onUnstable.subscribe({\r\n                    next: () => {\r\n                        this._isStable = false;\r\n                    }\r\n                });\r\n                this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\r\n                    next: () => {\r\n                        if (this._autoDetect) {\r\n                            // Do a change detection run with checkNoChanges set to true to check\r\n                            // there are no changes on the second run.\r\n                            this.detectChanges(true);\r\n                        }\r\n                    }\r\n                });\r\n                this._onStableSubscription = ngZone.onStable.subscribe({\r\n                    next: () => {\r\n                        this._isStable = true;\r\n                        // Check whether there is a pending whenStable() completer to resolve.\r\n                        if (this._promise !== null) {\r\n                            // If so check whether there are no pending macrotasks before resolving.\r\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\r\n                            // pending macrotasks.\r\n                            scheduleMicroTask(() => {\r\n                                if (!ngZone.hasPendingMacrotasks) {\r\n                                    if (this._promise !== null) {\r\n                                        this._resolve(true);\r\n                                        this._resolve = null;\r\n                                        this._promise = null;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n                this._onErrorSubscription = ngZone.onError.subscribe({\r\n                    next: (error) => {\r\n                        throw error;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    _tick(checkNoChanges) {\r\n        this.changeDetectorRef.detectChanges();\r\n        if (checkNoChanges) {\r\n            this.checkNoChanges();\r\n        }\r\n    }\r\n    /**\r\n     * Trigger a change detection cycle for the component.\r\n     */\r\n    detectChanges(checkNoChanges = true) {\r\n        if (this.ngZone != null) {\r\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\r\n            // detection are captured by the zone and can be waited for in isStable.\r\n            this.ngZone.run(() => {\r\n                this._tick(checkNoChanges);\r\n            });\r\n        }\r\n        else {\r\n            // Running without zone. Just do the change detection.\r\n            this._tick(checkNoChanges);\r\n        }\r\n    }\r\n    /**\r\n     * Do a change detection run to make sure there were no changes.\r\n     */\r\n    checkNoChanges() {\r\n        this.changeDetectorRef.checkNoChanges();\r\n    }\r\n    /**\r\n     * Set whether the fixture should autodetect changes.\r\n     *\r\n     * Also runs detectChanges once so that any existing change is detected.\r\n     */\r\n    autoDetectChanges(autoDetect = true) {\r\n        if (this.ngZone == null) {\r\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\r\n        }\r\n        this._autoDetect = autoDetect;\r\n        this.detectChanges();\r\n    }\r\n    /**\r\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\r\n     * yet.\r\n     */\r\n    isStable() {\r\n        return this._isStable && !this.ngZone.hasPendingMacrotasks;\r\n    }\r\n    /**\r\n     * Get a promise that resolves when the fixture is stable.\r\n     *\r\n     * This can be used to resume testing after events have triggered asynchronous activity or\r\n     * asynchronous change detection.\r\n     */\r\n    whenStable() {\r\n        if (this.isStable()) {\r\n            return Promise.resolve(false);\r\n        }\r\n        else if (this._promise !== null) {\r\n            return this._promise;\r\n        }\r\n        else {\r\n            this._promise = new Promise(res => {\r\n                this._resolve = res;\r\n            });\r\n            return this._promise;\r\n        }\r\n    }\r\n    _getRenderer() {\r\n        if (this._renderer === undefined) {\r\n            this._renderer = this.componentRef.injector.get(RendererFactory2, null);\r\n        }\r\n        return this._renderer;\r\n    }\r\n    /**\r\n     * Get a promise that resolves when the ui state is stable following animations.\r\n     */\r\n    whenRenderingDone() {\r\n        const renderer = this._getRenderer();\r\n        if (renderer && renderer.whenRenderingDone) {\r\n            return renderer.whenRenderingDone();\r\n        }\r\n        return this.whenStable();\r\n    }\r\n    /**\r\n     * Trigger component destruction.\r\n     */\r\n    destroy() {\r\n        if (!this._isDestroyed) {\r\n            this.componentRef.destroy();\r\n            if (this._onUnstableSubscription != null) {\r\n                this._onUnstableSubscription.unsubscribe();\r\n                this._onUnstableSubscription = null;\r\n            }\r\n            if (this._onStableSubscription != null) {\r\n                this._onStableSubscription.unsubscribe();\r\n                this._onStableSubscription = null;\r\n            }\r\n            if (this._onMicrotaskEmptySubscription != null) {\r\n                this._onMicrotaskEmptySubscription.unsubscribe();\r\n                this._onMicrotaskEmptySubscription = null;\r\n            }\r\n            if (this._onErrorSubscription != null) {\r\n                this._onErrorSubscription.unsubscribe();\r\n                this._onErrorSubscription = null;\r\n            }\r\n            this._isDestroyed = true;\r\n        }\r\n    }\r\n}\r\nfunction scheduleMicroTask(fn) {\r\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _Zone = typeof Zone !== 'undefined' ? Zone : null;\r\nconst fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\r\nconst fakeAsyncTestModuleNotLoadedErrorMessage = `zone-testing.js is needed for the fakeAsync() test helper but could not be found.\r\n        Please make sure that your environment includes zone.js/testing`;\r\n/**\r\n * Clears out the shared fake async zone for a test.\r\n * To be called in a global `beforeEach`.\r\n *\r\n * @publicApi\r\n */\r\nfunction resetFakeAsyncZone() {\r\n    if (fakeAsyncTestModule) {\r\n        return fakeAsyncTestModule.resetFakeAsyncZone();\r\n    }\r\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\r\n}\r\n/**\r\n * Wraps a function to be executed in the `fakeAsync` zone:\r\n * - Microtasks are manually executed by calling `flushMicrotasks()`.\r\n * - Timers are synchronous; `tick()` simulates the asynchronous passage of time.\r\n *\r\n * If there are any pending timers at the end of the function, an exception is thrown.\r\n *\r\n * Can be used to wrap `inject()` calls.\r\n *\r\n * @param fn The function that you want to wrap in the `fakeAysnc` zone.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * {@example core/testing/ts/fake_async.ts region='basic'}\r\n *\r\n *\r\n * @returns The function wrapped to be executed in the `fakeAsync` zone.\r\n * Any arguments passed when calling this returned function will be passed through to the `fn`\r\n * function in the parameters when it is called.\r\n *\r\n * @publicApi\r\n */\r\nfunction fakeAsync(fn) {\r\n    if (fakeAsyncTestModule) {\r\n        return fakeAsyncTestModule.fakeAsync(fn);\r\n    }\r\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\r\n}\r\n/**\r\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone.\r\n *\r\n * The microtasks queue is drained at the very start of this function and after any timer callback\r\n * has been executed.\r\n *\r\n * @param millis The number of milliseconds to advance the virtual timer.\r\n * @param tickOptions The options to pass to the `tick()` function.\r\n *\r\n * @usageNotes\r\n *\r\n * The `tick()` option is a flag called `processNewMacroTasksSynchronously`,\r\n * which determines whether or not to invoke new macroTasks.\r\n *\r\n * If you provide a `tickOptions` object, but do not specify a\r\n * `processNewMacroTasksSynchronously` property (`tick(100, {})`),\r\n * then `processNewMacroTasksSynchronously` defaults to true.\r\n *\r\n * If you omit the `tickOptions` parameter (`tick(100))`), then\r\n * `tickOptions` defaults to `{processNewMacroTasksSynchronously: true}`.\r\n *\r\n * ### Example\r\n *\r\n * {@example core/testing/ts/fake_async.ts region='basic'}\r\n *\r\n * The following example includes a nested timeout (new macroTask), and\r\n * the `tickOptions` parameter is allowed to default. In this case,\r\n * `processNewMacroTasksSynchronously` defaults to true, and the nested\r\n * function is executed on each tick.\r\n *\r\n * ```\r\n * it ('test with nested setTimeout', fakeAsync(() => {\r\n *   let nestedTimeoutInvoked = false;\r\n *   function funcWithNestedTimeout() {\r\n *     setTimeout(() => {\r\n *       nestedTimeoutInvoked = true;\r\n *     });\r\n *   };\r\n *   setTimeout(funcWithNestedTimeout);\r\n *   tick();\r\n *   expect(nestedTimeoutInvoked).toBe(true);\r\n * }));\r\n * ```\r\n *\r\n * In the following case, `processNewMacroTasksSynchronously` is explicitly\r\n * set to false, so the nested timeout function is not invoked.\r\n *\r\n * ```\r\n * it ('test with nested setTimeout', fakeAsync(() => {\r\n *   let nestedTimeoutInvoked = false;\r\n *   function funcWithNestedTimeout() {\r\n *     setTimeout(() => {\r\n *       nestedTimeoutInvoked = true;\r\n *     });\r\n *   };\r\n *   setTimeout(funcWithNestedTimeout);\r\n *   tick(0, {processNewMacroTasksSynchronously: false});\r\n *   expect(nestedTimeoutInvoked).toBe(false);\r\n * }));\r\n * ```\r\n *\r\n *\r\n * @publicApi\r\n */\r\nfunction tick(millis = 0, tickOptions = {\r\n    processNewMacroTasksSynchronously: true\r\n}) {\r\n    if (fakeAsyncTestModule) {\r\n        return fakeAsyncTestModule.tick(millis, tickOptions);\r\n    }\r\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\r\n}\r\n/**\r\n * Simulates the asynchronous passage of time for the timers in the `fakeAsync` zone by\r\n * draining the macrotask queue until it is empty.\r\n *\r\n * @param maxTurns The maximum number of times the scheduler attempts to clear its queue before\r\n *     throwing an error.\r\n * @returns The simulated time elapsed, in milliseconds.\r\n *\r\n * @publicApi\r\n */\r\nfunction flush(maxTurns) {\r\n    if (fakeAsyncTestModule) {\r\n        return fakeAsyncTestModule.flush(maxTurns);\r\n    }\r\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\r\n}\r\n/**\r\n * Discard all remaining periodic tasks.\r\n *\r\n * @publicApi\r\n */\r\nfunction discardPeriodicTasks() {\r\n    if (fakeAsyncTestModule) {\r\n        return fakeAsyncTestModule.discardPeriodicTasks();\r\n    }\r\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\r\n}\r\n/**\r\n * Flush any pending microtasks.\r\n *\r\n * @publicApi\r\n */\r\nfunction flushMicrotasks() {\r\n    if (fakeAsyncTestModule) {\r\n        return fakeAsyncTestModule.flushMicrotasks();\r\n    }\r\n    throw new Error(fakeAsyncTestModuleNotLoadedErrorMessage);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\r\n *\r\n * Example:\r\n * ```\r\n * @Component({\r\n *   selector: 'my-comp',\r\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\r\n * })\r\n * class MyComponent{\r\n * }\r\n *\r\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\r\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\r\n *\r\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\r\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\r\n *\r\n * // Use browser's `fetch()` function as the default resource resolution strategy.\r\n * resolveComponentResources(fetch).then(() => {\r\n *   // After resolution all URLs have been converted into `template` strings.\r\n *   renderComponent(MyComponent);\r\n * });\r\n *\r\n * ```\r\n *\r\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\r\n * to call this method outside JIT mode.\r\n *\r\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\r\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\r\n */\r\nfunction resolveComponentResources(resourceResolver) {\r\n    // Store all promises which are fetching the resources.\r\n    const componentResolved = [];\r\n    // Cache so that we don't fetch the same resource more than once.\r\n    const urlMap = new Map();\r\n    function cachedResourceResolve(url) {\r\n        let promise = urlMap.get(url);\r\n        if (!promise) {\r\n            const resp = resourceResolver(url);\r\n            urlMap.set(url, promise = resp.then(unwrapResponse));\r\n        }\r\n        return promise;\r\n    }\r\n    componentResourceResolutionQueue.forEach((component, type) => {\r\n        const promises = [];\r\n        if (component.templateUrl) {\r\n            promises.push(cachedResourceResolve(component.templateUrl).then((template) => {\r\n                component.template = template;\r\n            }));\r\n        }\r\n        const styleUrls = component.styleUrls;\r\n        const styles = component.styles || (component.styles = []);\r\n        const styleOffset = component.styles.length;\r\n        styleUrls && styleUrls.forEach((styleUrl, index) => {\r\n            styles.push(''); // pre-allocate array.\r\n            promises.push(cachedResourceResolve(styleUrl).then((style) => {\r\n                styles[styleOffset + index] = style;\r\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\r\n                if (styleUrls.length == 0) {\r\n                    component.styleUrls = undefined;\r\n                }\r\n            }));\r\n        });\r\n        const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\r\n        componentResolved.push(fullyResolved);\r\n    });\r\n    clearResolutionOfComponentResourcesQueue();\r\n    return Promise.all(componentResolved).then(() => undefined);\r\n}\r\nlet componentResourceResolutionQueue = new Map();\r\n// Track when existing ɵcmp for a Type is waiting on resources.\r\nconst componentDefPendingResolution = new Set();\r\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\r\n    if (componentNeedsResolution(metadata)) {\r\n        componentResourceResolutionQueue.set(type, metadata);\r\n        componentDefPendingResolution.add(type);\r\n    }\r\n}\r\nfunction isComponentDefPendingResolution(type) {\r\n    return componentDefPendingResolution.has(type);\r\n}\r\nfunction componentNeedsResolution(component) {\r\n    return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\r\n        component.styleUrls && component.styleUrls.length);\r\n}\r\nfunction clearResolutionOfComponentResourcesQueue() {\r\n    const old = componentResourceResolutionQueue;\r\n    componentResourceResolutionQueue = new Map();\r\n    return old;\r\n}\r\nfunction restoreComponentResolutionQueue(queue) {\r\n    componentDefPendingResolution.clear();\r\n    queue.forEach((_, type) => componentDefPendingResolution.add(type));\r\n    componentResourceResolutionQueue = queue;\r\n}\r\nfunction isComponentResourceResolutionQueueEmpty() {\r\n    return componentResourceResolutionQueue.size === 0;\r\n}\r\nfunction unwrapResponse(response) {\r\n    return typeof response == 'string' ? response : response.text();\r\n}\r\nfunction componentDefResolved(type) {\r\n    componentDefPendingResolution.delete(type);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nlet _nextReferenceId = 0;\r\nclass MetadataOverrider {\r\n    constructor() {\r\n        this._references = new Map();\r\n    }\r\n    /**\r\n     * Creates a new instance for the given metadata class\r\n     * based on an old instance and overrides.\r\n     */\r\n    overrideMetadata(metadataClass, oldMetadata, override) {\r\n        const props = {};\r\n        if (oldMetadata) {\r\n            _valueProps(oldMetadata).forEach((prop) => props[prop] = oldMetadata[prop]);\r\n        }\r\n        if (override.set) {\r\n            if (override.remove || override.add) {\r\n                throw new Error(`Cannot set and add/remove ${ɵstringify(metadataClass)} at the same time!`);\r\n            }\r\n            setMetadata(props, override.set);\r\n        }\r\n        if (override.remove) {\r\n            removeMetadata(props, override.remove, this._references);\r\n        }\r\n        if (override.add) {\r\n            addMetadata(props, override.add);\r\n        }\r\n        return new metadataClass(props);\r\n    }\r\n}\r\nfunction removeMetadata(metadata, remove, references) {\r\n    const removeObjects = new Set();\r\n    for (const prop in remove) {\r\n        const removeValue = remove[prop];\r\n        if (Array.isArray(removeValue)) {\r\n            removeValue.forEach((value) => {\r\n                removeObjects.add(_propHashKey(prop, value, references));\r\n            });\r\n        }\r\n        else {\r\n            removeObjects.add(_propHashKey(prop, removeValue, references));\r\n        }\r\n    }\r\n    for (const prop in metadata) {\r\n        const propValue = metadata[prop];\r\n        if (Array.isArray(propValue)) {\r\n            metadata[prop] = propValue.filter((value) => !removeObjects.has(_propHashKey(prop, value, references)));\r\n        }\r\n        else {\r\n            if (removeObjects.has(_propHashKey(prop, propValue, references))) {\r\n                metadata[prop] = undefined;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction addMetadata(metadata, add) {\r\n    for (const prop in add) {\r\n        const addValue = add[prop];\r\n        const propValue = metadata[prop];\r\n        if (propValue != null && Array.isArray(propValue)) {\r\n            metadata[prop] = propValue.concat(addValue);\r\n        }\r\n        else {\r\n            metadata[prop] = addValue;\r\n        }\r\n    }\r\n}\r\nfunction setMetadata(metadata, set) {\r\n    for (const prop in set) {\r\n        metadata[prop] = set[prop];\r\n    }\r\n}\r\nfunction _propHashKey(propName, propValue, references) {\r\n    let nextObjectId = 0;\r\n    const objectIds = new Map();\r\n    const replacer = (key, value) => {\r\n        if (value !== null && typeof value === 'object') {\r\n            if (objectIds.has(value)) {\r\n                return objectIds.get(value);\r\n            }\r\n            // Record an id for this object such that any later references use the object's id instead\r\n            // of the object itself, in order to break cyclic pointers in objects.\r\n            objectIds.set(value, `ɵobj#${nextObjectId++}`);\r\n            // The first time an object is seen the object itself is serialized.\r\n            return value;\r\n        }\r\n        else if (typeof value === 'function') {\r\n            value = _serializeReference(value, references);\r\n        }\r\n        return value;\r\n    };\r\n    return `${propName}:${JSON.stringify(propValue, replacer)}`;\r\n}\r\nfunction _serializeReference(ref, references) {\r\n    let id = references.get(ref);\r\n    if (!id) {\r\n        id = `${ɵstringify(ref)}${_nextReferenceId++}`;\r\n        references.set(ref, id);\r\n    }\r\n    return id;\r\n}\r\nfunction _valueProps(obj) {\r\n    const props = [];\r\n    // regular public props\r\n    Object.keys(obj).forEach((prop) => {\r\n        if (!prop.startsWith('_')) {\r\n            props.push(prop);\r\n        }\r\n    });\r\n    // getters\r\n    let proto = obj;\r\n    while (proto = Object.getPrototypeOf(proto)) {\r\n        Object.keys(proto).forEach((protoProp) => {\r\n            const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\r\n            if (!protoProp.startsWith('_') && desc && 'get' in desc) {\r\n                props.push(protoProp);\r\n            }\r\n        });\r\n    }\r\n    return props;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst reflection = new ɵReflectionCapabilities();\r\n/**\r\n * Allows to override ivy metadata for tests (via the `TestBed`).\r\n */\r\nclass OverrideResolver {\r\n    constructor() {\r\n        this.overrides = new Map();\r\n        this.resolved = new Map();\r\n    }\r\n    addOverride(type, override) {\r\n        const overrides = this.overrides.get(type) || [];\r\n        overrides.push(override);\r\n        this.overrides.set(type, overrides);\r\n        this.resolved.delete(type);\r\n    }\r\n    setOverrides(overrides) {\r\n        this.overrides.clear();\r\n        overrides.forEach(([type, override]) => {\r\n            this.addOverride(type, override);\r\n        });\r\n    }\r\n    getAnnotation(type) {\r\n        const annotations = reflection.annotations(type);\r\n        // Try to find the nearest known Type annotation and make sure that this annotation is an\r\n        // instance of the type we are looking for, so we can use it for resolution. Note: there might\r\n        // be multiple known annotations found due to the fact that Components can extend Directives (so\r\n        // both Directive and Component annotations would be present), so we always check if the known\r\n        // annotation has the right type.\r\n        for (let i = annotations.length - 1; i >= 0; i--) {\r\n            const annotation = annotations[i];\r\n            const isKnownType = annotation instanceof Directive || annotation instanceof Component ||\r\n                annotation instanceof Pipe || annotation instanceof NgModule;\r\n            if (isKnownType) {\r\n                return annotation instanceof this.type ? annotation : null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    resolve(type) {\r\n        let resolved = this.resolved.get(type) || null;\r\n        if (!resolved) {\r\n            resolved = this.getAnnotation(type);\r\n            if (resolved) {\r\n                const overrides = this.overrides.get(type);\r\n                if (overrides) {\r\n                    const overrider = new MetadataOverrider();\r\n                    overrides.forEach(override => {\r\n                        resolved = overrider.overrideMetadata(this.type, resolved, override);\r\n                    });\r\n                }\r\n            }\r\n            this.resolved.set(type, resolved);\r\n        }\r\n        return resolved;\r\n    }\r\n}\r\nclass DirectiveResolver extends OverrideResolver {\r\n    get type() {\r\n        return Directive;\r\n    }\r\n}\r\nclass ComponentResolver extends OverrideResolver {\r\n    get type() {\r\n        return Component;\r\n    }\r\n}\r\nclass PipeResolver extends OverrideResolver {\r\n    get type() {\r\n        return Pipe;\r\n    }\r\n}\r\nclass NgModuleResolver extends OverrideResolver {\r\n    get type() {\r\n        return NgModule;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar TestingModuleOverride;\r\n(function (TestingModuleOverride) {\r\n    TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\r\n    TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\r\n})(TestingModuleOverride || (TestingModuleOverride = {}));\r\nfunction isTestingModuleOverride(value) {\r\n    return value === TestingModuleOverride.DECLARATION ||\r\n        value === TestingModuleOverride.OVERRIDE_TEMPLATE;\r\n}\r\nclass R3TestBedCompiler {\r\n    constructor(platform, additionalModuleTypes) {\r\n        this.platform = platform;\r\n        this.additionalModuleTypes = additionalModuleTypes;\r\n        this.originalComponentResolutionQueue = null;\r\n        // Testing module configuration\r\n        this.declarations = [];\r\n        this.imports = [];\r\n        this.providers = [];\r\n        this.schemas = [];\r\n        // Queues of components/directives/pipes that should be recompiled.\r\n        this.pendingComponents = new Set();\r\n        this.pendingDirectives = new Set();\r\n        this.pendingPipes = new Set();\r\n        // Keep track of all components and directives, so we can patch Providers onto defs later.\r\n        this.seenComponents = new Set();\r\n        this.seenDirectives = new Set();\r\n        // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\r\n        this.overriddenModules = new Set();\r\n        // Store resolved styles for Components that have template overrides present and `styleUrls`\r\n        // defined at the same time.\r\n        this.existingComponentStyles = new Map();\r\n        this.resolvers = initResolvers();\r\n        this.componentToModuleScope = new Map();\r\n        // Map that keeps initial version of component/directive/pipe defs in case\r\n        // we compile a Type again, thus overriding respective static fields. This is\r\n        // required to make sure we restore defs to their initial states between test runs\r\n        // TODO: we should support the case with multiple defs on a type\r\n        this.initialNgDefs = new Map();\r\n        // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\r\n        // defs in case TestBed makes changes to the originals.\r\n        this.defCleanupOps = [];\r\n        this._injector = null;\r\n        this.compilerProviders = null;\r\n        this.providerOverrides = [];\r\n        this.rootProviderOverrides = [];\r\n        // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\r\n        // module's provider list.\r\n        this.providerOverridesByModule = new Map();\r\n        this.providerOverridesByToken = new Map();\r\n        this.moduleProvidersOverridden = new Set();\r\n        this.testModuleRef = null;\r\n        class DynamicTestModule {\r\n        }\r\n        this.testModuleType = DynamicTestModule;\r\n    }\r\n    setCompilerProviders(providers) {\r\n        this.compilerProviders = providers;\r\n        this._injector = null;\r\n    }\r\n    configureTestingModule(moduleDef) {\r\n        // Enqueue any compilation tasks for the directly declared component.\r\n        if (moduleDef.declarations !== undefined) {\r\n            this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\r\n            this.declarations.push(...moduleDef.declarations);\r\n        }\r\n        // Enqueue any compilation tasks for imported modules.\r\n        if (moduleDef.imports !== undefined) {\r\n            this.queueTypesFromModulesArray(moduleDef.imports);\r\n            this.imports.push(...moduleDef.imports);\r\n        }\r\n        if (moduleDef.providers !== undefined) {\r\n            this.providers.push(...moduleDef.providers);\r\n        }\r\n        if (moduleDef.schemas !== undefined) {\r\n            this.schemas.push(...moduleDef.schemas);\r\n        }\r\n    }\r\n    overrideModule(ngModule, override) {\r\n        this.overriddenModules.add(ngModule);\r\n        // Compile the module right away.\r\n        this.resolvers.module.addOverride(ngModule, override);\r\n        const metadata = this.resolvers.module.resolve(ngModule);\r\n        if (metadata === null) {\r\n            throw invalidTypeError(ngModule.name, 'NgModule');\r\n        }\r\n        this.recompileNgModule(ngModule, metadata);\r\n        // At this point, the module has a valid module def (ɵmod), but the override may have introduced\r\n        // new declarations or imported modules. Ingest any possible new types and add them to the\r\n        // current queue.\r\n        this.queueTypesFromModulesArray([ngModule]);\r\n    }\r\n    overrideComponent(component, override) {\r\n        this.resolvers.component.addOverride(component, override);\r\n        this.pendingComponents.add(component);\r\n    }\r\n    overrideDirective(directive, override) {\r\n        this.resolvers.directive.addOverride(directive, override);\r\n        this.pendingDirectives.add(directive);\r\n    }\r\n    overridePipe(pipe, override) {\r\n        this.resolvers.pipe.addOverride(pipe, override);\r\n        this.pendingPipes.add(pipe);\r\n    }\r\n    overrideProvider(token, provider) {\r\n        let providerDef;\r\n        if (provider.useFactory !== undefined) {\r\n            providerDef = {\r\n                provide: token,\r\n                useFactory: provider.useFactory,\r\n                deps: provider.deps || [],\r\n                multi: provider.multi\r\n            };\r\n        }\r\n        else if (provider.useValue !== undefined) {\r\n            providerDef = { provide: token, useValue: provider.useValue, multi: provider.multi };\r\n        }\r\n        else {\r\n            providerDef = { provide: token };\r\n        }\r\n        const injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\r\n        const providedIn = injectableDef === null ? null : resolveForwardRef(injectableDef.providedIn);\r\n        const overridesBucket = providedIn === 'root' ? this.rootProviderOverrides : this.providerOverrides;\r\n        overridesBucket.push(providerDef);\r\n        // Keep overrides grouped by token as well for fast lookups using token\r\n        this.providerOverridesByToken.set(token, providerDef);\r\n        if (injectableDef !== null && providedIn !== null && typeof providedIn !== 'string') {\r\n            const existingOverrides = this.providerOverridesByModule.get(providedIn);\r\n            if (existingOverrides !== undefined) {\r\n                existingOverrides.push(providerDef);\r\n            }\r\n            else {\r\n                this.providerOverridesByModule.set(providedIn, [providerDef]);\r\n            }\r\n        }\r\n    }\r\n    overrideTemplateUsingTestingModule(type, template) {\r\n        const def = type[ɵNG_COMP_DEF];\r\n        const hasStyleUrls = () => {\r\n            const metadata = this.resolvers.component.resolve(type);\r\n            return !!metadata.styleUrls && metadata.styleUrls.length > 0;\r\n        };\r\n        const overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\r\n        // In Ivy, compiling a component does not require knowing the module providing the\r\n        // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\r\n        // overrideComponent. Important: overriding template requires full Component re-compilation,\r\n        // which may fail in case styleUrls are also present (thus Component is considered as required\r\n        // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\r\n        // preserve current styles available on Component def and restore styles back once compilation\r\n        // is complete.\r\n        const override = overrideStyleUrls ? { template, styles: [], styleUrls: [] } : { template };\r\n        this.overrideComponent(type, { set: override });\r\n        if (overrideStyleUrls && def.styles && def.styles.length > 0) {\r\n            this.existingComponentStyles.set(type, def.styles);\r\n        }\r\n        // Set the component's scope to be the testing module.\r\n        this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\r\n    }\r\n    async compileComponents() {\r\n        this.clearComponentResolutionQueue();\r\n        // Run compilers for all queued types.\r\n        let needsAsyncResources = this.compileTypesSync();\r\n        // compileComponents() should not be async unless it needs to be.\r\n        if (needsAsyncResources) {\r\n            let resourceLoader;\r\n            let resolver = (url) => {\r\n                if (!resourceLoader) {\r\n                    resourceLoader = this.injector.get(ResourceLoader);\r\n                }\r\n                return Promise.resolve(resourceLoader.get(url));\r\n            };\r\n            await resolveComponentResources(resolver);\r\n        }\r\n    }\r\n    finalize() {\r\n        // One last compile\r\n        this.compileTypesSync();\r\n        // Create the testing module itself.\r\n        this.compileTestModule();\r\n        this.applyTransitiveScopes();\r\n        this.applyProviderOverrides();\r\n        // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\r\n        // Components have `styleUrls` fields defined and template override was requested.\r\n        this.patchComponentsWithExistingStyles();\r\n        // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\r\n        // every component.\r\n        this.componentToModuleScope.clear();\r\n        const parentInjector = this.platform.injector;\r\n        this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector);\r\n        // ApplicationInitStatus.runInitializers() is marked @internal to core.\r\n        // Cast it to any before accessing it.\r\n        this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers();\r\n        // Set locale ID after running app initializers, since locale information might be updated while\r\n        // running initializers. This is also consistent with the execution order while bootstrapping an\r\n        // app (see `packages/core/src/application_ref.ts` file).\r\n        const localeId = this.testModuleRef.injector.get(LOCALE_ID, ɵDEFAULT_LOCALE_ID);\r\n        ɵsetLocaleId(localeId);\r\n        return this.testModuleRef;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _compileNgModuleSync(moduleType) {\r\n        this.queueTypesFromModulesArray([moduleType]);\r\n        this.compileTypesSync();\r\n        this.applyProviderOverrides();\r\n        this.applyProviderOverridesToModule(moduleType);\r\n        this.applyTransitiveScopes();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    async _compileNgModuleAsync(moduleType) {\r\n        this.queueTypesFromModulesArray([moduleType]);\r\n        await this.compileComponents();\r\n        this.applyProviderOverrides();\r\n        this.applyProviderOverridesToModule(moduleType);\r\n        this.applyTransitiveScopes();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _getModuleResolver() {\r\n        return this.resolvers.module;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _getComponentFactories(moduleType) {\r\n        return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce((factories, declaration) => {\r\n            const componentDef = declaration.ɵcmp;\r\n            componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, this.testModuleRef));\r\n            return factories;\r\n        }, []);\r\n    }\r\n    compileTypesSync() {\r\n        // Compile all queued components, directives, pipes.\r\n        let needsAsyncResources = false;\r\n        this.pendingComponents.forEach(declaration => {\r\n            needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\r\n            const metadata = this.resolvers.component.resolve(declaration);\r\n            if (metadata === null) {\r\n                throw invalidTypeError(declaration.name, 'Component');\r\n            }\r\n            this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\r\n            ɵcompileComponent(declaration, metadata);\r\n        });\r\n        this.pendingComponents.clear();\r\n        this.pendingDirectives.forEach(declaration => {\r\n            const metadata = this.resolvers.directive.resolve(declaration);\r\n            if (metadata === null) {\r\n                throw invalidTypeError(declaration.name, 'Directive');\r\n            }\r\n            this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\r\n            ɵcompileDirective(declaration, metadata);\r\n        });\r\n        this.pendingDirectives.clear();\r\n        this.pendingPipes.forEach(declaration => {\r\n            const metadata = this.resolvers.pipe.resolve(declaration);\r\n            if (metadata === null) {\r\n                throw invalidTypeError(declaration.name, 'Pipe');\r\n            }\r\n            this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\r\n            ɵcompilePipe(declaration, metadata);\r\n        });\r\n        this.pendingPipes.clear();\r\n        return needsAsyncResources;\r\n    }\r\n    applyTransitiveScopes() {\r\n        if (this.overriddenModules.size > 0) {\r\n            // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\r\n            // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\r\n            // collect all affected modules and reset scopes to force their re-calculation.\r\n            const testingModuleDef = this.testModuleType[ɵNG_MOD_DEF];\r\n            const affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\r\n            if (affectedModules.size > 0) {\r\n                affectedModules.forEach(moduleType => {\r\n                    this.storeFieldOfDefOnType(moduleType, ɵNG_MOD_DEF, 'transitiveCompileScopes');\r\n                    moduleType[ɵNG_MOD_DEF].transitiveCompileScopes = null;\r\n                });\r\n            }\r\n        }\r\n        const moduleToScope = new Map();\r\n        const getScopeOfModule = (moduleType) => {\r\n            if (!moduleToScope.has(moduleType)) {\r\n                const isTestingModule = isTestingModuleOverride(moduleType);\r\n                const realType = isTestingModule ? this.testModuleType : moduleType;\r\n                moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType));\r\n            }\r\n            return moduleToScope.get(moduleType);\r\n        };\r\n        this.componentToModuleScope.forEach((moduleType, componentType) => {\r\n            const moduleScope = getScopeOfModule(moduleType);\r\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\r\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs');\r\n            // `tView` that is stored on component def contains information about directives and pipes\r\n            // that are in the scope of this component. Patching component scope will cause `tView` to be\r\n            // changed. Store original `tView` before patching scope, so the `tView` (including scope\r\n            // information) is restored back to its previous/original state before running next test.\r\n            this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'tView');\r\n            ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\r\n        });\r\n        this.componentToModuleScope.clear();\r\n    }\r\n    applyProviderOverrides() {\r\n        const maybeApplyOverrides = (field) => (type) => {\r\n            const resolver = field === ɵNG_COMP_DEF ? this.resolvers.component : this.resolvers.directive;\r\n            const metadata = resolver.resolve(type);\r\n            if (this.hasProviderOverrides(metadata.providers)) {\r\n                this.patchDefWithProviderOverrides(type, field);\r\n            }\r\n        };\r\n        this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\r\n        this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\r\n        this.seenComponents.clear();\r\n        this.seenDirectives.clear();\r\n    }\r\n    applyProviderOverridesToModule(moduleType) {\r\n        if (this.moduleProvidersOverridden.has(moduleType)) {\r\n            return;\r\n        }\r\n        this.moduleProvidersOverridden.add(moduleType);\r\n        const injectorDef = moduleType[ɵNG_INJ_DEF];\r\n        if (this.providerOverridesByToken.size > 0) {\r\n            const providers = [\r\n                ...injectorDef.providers,\r\n                ...(this.providerOverridesByModule.get(moduleType) || [])\r\n            ];\r\n            if (this.hasProviderOverrides(providers)) {\r\n                this.maybeStoreNgDef(ɵNG_INJ_DEF, moduleType);\r\n                this.storeFieldOfDefOnType(moduleType, ɵNG_INJ_DEF, 'providers');\r\n                injectorDef.providers = this.getOverriddenProviders(providers);\r\n            }\r\n            // Apply provider overrides to imported modules recursively\r\n            const moduleDef = moduleType[ɵNG_MOD_DEF];\r\n            const imports = maybeUnwrapFn(moduleDef.imports);\r\n            for (const importedModule of imports) {\r\n                this.applyProviderOverridesToModule(importedModule);\r\n            }\r\n            // Also override the providers on any ModuleWithProviders imports since those don't appear in\r\n            // the moduleDef.\r\n            for (const importedModule of flatten(injectorDef.imports)) {\r\n                if (isModuleWithProviders(importedModule)) {\r\n                    this.defCleanupOps.push({\r\n                        object: importedModule,\r\n                        fieldName: 'providers',\r\n                        originalValue: importedModule.providers\r\n                    });\r\n                    importedModule.providers = this.getOverriddenProviders(importedModule.providers);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    patchComponentsWithExistingStyles() {\r\n        this.existingComponentStyles.forEach((styles, type) => type[ɵNG_COMP_DEF].styles = styles);\r\n        this.existingComponentStyles.clear();\r\n    }\r\n    queueTypeArray(arr, moduleType) {\r\n        for (const value of arr) {\r\n            if (Array.isArray(value)) {\r\n                this.queueTypeArray(value, moduleType);\r\n            }\r\n            else {\r\n                this.queueType(value, moduleType);\r\n            }\r\n        }\r\n    }\r\n    recompileNgModule(ngModule, metadata) {\r\n        // Cache the initial ngModuleDef as it will be overwritten.\r\n        this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\r\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\r\n        ɵcompileNgModuleDefs(ngModule, metadata);\r\n    }\r\n    queueType(type, moduleType) {\r\n        const component = this.resolvers.component.resolve(type);\r\n        if (component) {\r\n            // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\r\n            // missing. That might happen in case a class without any Angular decorators extends another\r\n            // class where Component/Directive/Pipe decorator is defined.\r\n            if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\r\n                this.pendingComponents.add(type);\r\n            }\r\n            this.seenComponents.add(type);\r\n            // Keep track of the module which declares this component, so later the component's scope\r\n            // can be set correctly. If the component has already been recorded here, then one of several\r\n            // cases is true:\r\n            // * the module containing the component was imported multiple times (common).\r\n            // * the component is declared in multiple modules (which is an error).\r\n            // * the component was in 'declarations' of the testing module, and also in an imported module\r\n            //   in which case the module scope will be TestingModuleOverride.DECLARATION.\r\n            // * overrideTemplateUsingTestingModule was called for the component in which case the module\r\n            //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\r\n            //\r\n            // If the component was previously in the testing module's 'declarations' (meaning the\r\n            // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\r\n            // real module, which was imported. This pattern is understood to mean that the component\r\n            // should use its original scope, but that the testing module should also contain the\r\n            // component in its scope.\r\n            if (!this.componentToModuleScope.has(type) ||\r\n                this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\r\n                this.componentToModuleScope.set(type, moduleType);\r\n            }\r\n            return;\r\n        }\r\n        const directive = this.resolvers.directive.resolve(type);\r\n        if (directive) {\r\n            if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\r\n                this.pendingDirectives.add(type);\r\n            }\r\n            this.seenDirectives.add(type);\r\n            return;\r\n        }\r\n        const pipe = this.resolvers.pipe.resolve(type);\r\n        if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\r\n            this.pendingPipes.add(type);\r\n            return;\r\n        }\r\n    }\r\n    queueTypesFromModulesArray(arr) {\r\n        // Because we may encounter the same NgModule while processing the imports and exports of an\r\n        // NgModule tree, we cache them in this set so we can skip ones that have already been seen\r\n        // encountered. In some test setups, this caching resulted in 10X runtime improvement.\r\n        const processedNgModuleDefs = new Set();\r\n        const queueTypesFromModulesArrayRecur = (arr) => {\r\n            for (const value of arr) {\r\n                if (Array.isArray(value)) {\r\n                    queueTypesFromModulesArrayRecur(value);\r\n                }\r\n                else if (hasNgModuleDef(value)) {\r\n                    const def = value.ɵmod;\r\n                    if (processedNgModuleDefs.has(def)) {\r\n                        continue;\r\n                    }\r\n                    processedNgModuleDefs.add(def);\r\n                    // Look through declarations, imports, and exports, and queue\r\n                    // everything found there.\r\n                    this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\r\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\r\n                    queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\r\n                }\r\n                else if (isModuleWithProviders(value)) {\r\n                    queueTypesFromModulesArrayRecur([value.ngModule]);\r\n                }\r\n            }\r\n        };\r\n        queueTypesFromModulesArrayRecur(arr);\r\n    }\r\n    // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\r\n    // that import (even transitively) an overridden one. For all affected modules we need to\r\n    // recalculate their scopes for a given test run and restore original scopes at the end. The goal\r\n    // of this function is to collect all affected modules in a set for further processing. Example:\r\n    // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\r\n    // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\r\n    // invalidated with the override.\r\n    collectModulesAffectedByOverrides(arr) {\r\n        const seenModules = new Set();\r\n        const affectedModules = new Set();\r\n        const calcAffectedModulesRecur = (arr, path) => {\r\n            for (const value of arr) {\r\n                if (Array.isArray(value)) {\r\n                    // If the value is an array, just flatten it (by invoking this function recursively),\r\n                    // keeping \"path\" the same.\r\n                    calcAffectedModulesRecur(value, path);\r\n                }\r\n                else if (hasNgModuleDef(value)) {\r\n                    if (seenModules.has(value)) {\r\n                        // If we've seen this module before and it's included into \"affected modules\" list, mark\r\n                        // the whole path that leads to that module as affected, but do not descend into its\r\n                        // imports, since we already examined them before.\r\n                        if (affectedModules.has(value)) {\r\n                            path.forEach(item => affectedModules.add(item));\r\n                        }\r\n                        continue;\r\n                    }\r\n                    seenModules.add(value);\r\n                    if (this.overriddenModules.has(value)) {\r\n                        path.forEach(item => affectedModules.add(item));\r\n                    }\r\n                    // Examine module imports recursively to look for overridden modules.\r\n                    const moduleDef = value[ɵNG_MOD_DEF];\r\n                    calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\r\n                }\r\n            }\r\n        };\r\n        calcAffectedModulesRecur(arr, []);\r\n        return affectedModules;\r\n    }\r\n    maybeStoreNgDef(prop, type) {\r\n        if (!this.initialNgDefs.has(type)) {\r\n            const currentDef = Object.getOwnPropertyDescriptor(type, prop);\r\n            this.initialNgDefs.set(type, [prop, currentDef]);\r\n        }\r\n    }\r\n    storeFieldOfDefOnType(type, defField, fieldName) {\r\n        const def = type[defField];\r\n        const originalValue = def[fieldName];\r\n        this.defCleanupOps.push({ object: def, fieldName, originalValue });\r\n    }\r\n    /**\r\n     * Clears current components resolution queue, but stores the state of the queue, so we can\r\n     * restore it later. Clearing the queue is required before we try to compile components (via\r\n     * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\r\n     */\r\n    clearComponentResolutionQueue() {\r\n        if (this.originalComponentResolutionQueue === null) {\r\n            this.originalComponentResolutionQueue = new Map();\r\n        }\r\n        clearResolutionOfComponentResourcesQueue().forEach((value, key) => this.originalComponentResolutionQueue.set(key, value));\r\n    }\r\n    /*\r\n     * Restores component resolution queue to the previously saved state. This operation is performed\r\n     * as a part of restoring the state after completion of the current set of tests (that might\r\n     * potentially mutate the state).\r\n     */\r\n    restoreComponentResolutionQueue() {\r\n        if (this.originalComponentResolutionQueue !== null) {\r\n            restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\r\n            this.originalComponentResolutionQueue = null;\r\n        }\r\n    }\r\n    restoreOriginalState() {\r\n        // Process cleanup ops in reverse order so the field's original value is restored correctly (in\r\n        // case there were multiple overrides for the same field).\r\n        forEachRight(this.defCleanupOps, (op) => {\r\n            op.object[op.fieldName] = op.originalValue;\r\n        });\r\n        // Restore initial component/directive/pipe defs\r\n        this.initialNgDefs.forEach((value, type) => {\r\n            const [prop, descriptor] = value;\r\n            if (!descriptor) {\r\n                // Delete operations are generally undesirable since they have performance implications\r\n                // on objects they were applied to. In this particular case, situations where this code\r\n                // is invoked should be quite rare to cause any noticeable impact, since it's applied\r\n                // only to some test cases (for example when class with no annotations extends some\r\n                // @Component) when we need to clear 'ɵcmp' field on a given class to restore\r\n                // its original state (before applying overrides and running tests).\r\n                delete type[prop];\r\n            }\r\n            else {\r\n                Object.defineProperty(type, prop, descriptor);\r\n            }\r\n        });\r\n        this.initialNgDefs.clear();\r\n        this.moduleProvidersOverridden.clear();\r\n        this.restoreComponentResolutionQueue();\r\n        // Restore the locale ID to the default value, this shouldn't be necessary but we never know\r\n        ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\r\n    }\r\n    compileTestModule() {\r\n        class RootScopeModule {\r\n        }\r\n        ɵcompileNgModuleDefs(RootScopeModule, {\r\n            providers: [...this.rootProviderOverrides],\r\n        });\r\n        const ngZone = new NgZone({ enableLongStackTrace: true });\r\n        const providers = [\r\n            { provide: NgZone, useValue: ngZone },\r\n            { provide: Compiler, useFactory: () => new R3TestCompiler(this) },\r\n            ...this.providers,\r\n            ...this.providerOverrides,\r\n        ];\r\n        const imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\r\n        // clang-format off\r\n        ɵcompileNgModuleDefs(this.testModuleType, {\r\n            declarations: this.declarations,\r\n            imports,\r\n            schemas: this.schemas,\r\n            providers,\r\n        }, /* allowDuplicateDeclarationsInRoot */ true);\r\n        // clang-format on\r\n        this.applyProviderOverridesToModule(this.testModuleType);\r\n    }\r\n    get injector() {\r\n        if (this._injector !== null) {\r\n            return this._injector;\r\n        }\r\n        const providers = [];\r\n        const compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\r\n        compilerOptions.forEach(opts => {\r\n            if (opts.providers) {\r\n                providers.push(opts.providers);\r\n            }\r\n        });\r\n        if (this.compilerProviders !== null) {\r\n            providers.push(...this.compilerProviders);\r\n        }\r\n        // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\r\n        class CompilerModule {\r\n        }\r\n        ɵcompileNgModuleDefs(CompilerModule, { providers });\r\n        const CompilerModuleFactory = new ɵNgModuleFactory(CompilerModule);\r\n        this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\r\n        return this._injector;\r\n    }\r\n    // get overrides for a specific provider (if any)\r\n    getSingleProviderOverrides(provider) {\r\n        const token = getProviderToken(provider);\r\n        return this.providerOverridesByToken.get(token) || null;\r\n    }\r\n    getProviderOverrides(providers) {\r\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\r\n            return [];\r\n        // There are two flattening operations here. The inner flatten() operates on the metadata's\r\n        // providers and applies a mapping function which retrieves overrides for each incoming\r\n        // provider. The outer flatten() then flattens the produced overrides array. If this is not\r\n        // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\r\n        // providers array and contaminate any error messages that might be generated.\r\n        return flatten(flatten(providers, (provider) => this.getSingleProviderOverrides(provider) || []));\r\n    }\r\n    getOverriddenProviders(providers) {\r\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\r\n            return [];\r\n        const flattenedProviders = flatten(providers);\r\n        const overrides = this.getProviderOverrides(flattenedProviders);\r\n        const overriddenProviders = [...flattenedProviders, ...overrides];\r\n        const final = [];\r\n        const seenOverriddenProviders = new Set();\r\n        // We iterate through the list of providers in reverse order to make sure provider overrides\r\n        // take precedence over the values defined in provider list. We also filter out all providers\r\n        // that have overrides, keeping overridden values only. This is needed, since presence of a\r\n        // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\r\n        forEachRight(overriddenProviders, (provider) => {\r\n            const token = getProviderToken(provider);\r\n            if (this.providerOverridesByToken.has(token)) {\r\n                if (!seenOverriddenProviders.has(token)) {\r\n                    seenOverriddenProviders.add(token);\r\n                    // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\r\n                    // make sure that provided override takes highest precedence and is not combined with\r\n                    // other instances of the same multi provider.\r\n                    final.unshift({ ...provider, multi: false });\r\n                }\r\n            }\r\n            else {\r\n                final.unshift(provider);\r\n            }\r\n        });\r\n        return final;\r\n    }\r\n    hasProviderOverrides(providers) {\r\n        return this.getProviderOverrides(providers).length > 0;\r\n    }\r\n    patchDefWithProviderOverrides(declaration, field) {\r\n        const def = declaration[field];\r\n        if (def && def.providersResolver) {\r\n            this.maybeStoreNgDef(field, declaration);\r\n            const resolver = def.providersResolver;\r\n            const processProvidersFn = (providers) => this.getOverriddenProviders(providers);\r\n            this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\r\n            def.providersResolver = (ngDef) => resolver(ngDef, processProvidersFn);\r\n        }\r\n    }\r\n}\r\nfunction initResolvers() {\r\n    return {\r\n        module: new NgModuleResolver(),\r\n        component: new ComponentResolver(),\r\n        directive: new DirectiveResolver(),\r\n        pipe: new PipeResolver()\r\n    };\r\n}\r\nfunction hasNgModuleDef(value) {\r\n    return value.hasOwnProperty('ɵmod');\r\n}\r\nfunction maybeUnwrapFn(maybeFn) {\r\n    return maybeFn instanceof Function ? maybeFn() : maybeFn;\r\n}\r\nfunction flatten(values, mapFn) {\r\n    const out = [];\r\n    values.forEach(value => {\r\n        if (Array.isArray(value)) {\r\n            out.push(...flatten(value, mapFn));\r\n        }\r\n        else {\r\n            out.push(mapFn ? mapFn(value) : value);\r\n        }\r\n    });\r\n    return out;\r\n}\r\nfunction getProviderField(provider, field) {\r\n    return provider && typeof provider === 'object' && provider[field];\r\n}\r\nfunction getProviderToken(provider) {\r\n    return getProviderField(provider, 'provide') || provider;\r\n}\r\nfunction isModuleWithProviders(value) {\r\n    return value.hasOwnProperty('ngModule');\r\n}\r\nfunction forEachRight(values, fn) {\r\n    for (let idx = values.length - 1; idx >= 0; idx--) {\r\n        fn(values[idx], idx);\r\n    }\r\n}\r\nfunction invalidTypeError(name, expectedType) {\r\n    return new Error(`${name} class doesn't have @${expectedType} decorator or is missing metadata.`);\r\n}\r\nclass R3TestCompiler {\r\n    constructor(testBed) {\r\n        this.testBed = testBed;\r\n    }\r\n    compileModuleSync(moduleType) {\r\n        this.testBed._compileNgModuleSync(moduleType);\r\n        return new ɵNgModuleFactory(moduleType);\r\n    }\r\n    async compileModuleAsync(moduleType) {\r\n        await this.testBed._compileNgModuleAsync(moduleType);\r\n        return new ɵNgModuleFactory(moduleType);\r\n    }\r\n    compileModuleAndAllComponentsSync(moduleType) {\r\n        const ngModuleFactory = this.compileModuleSync(moduleType);\r\n        const componentFactories = this.testBed._getComponentFactories(moduleType);\r\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\r\n    }\r\n    async compileModuleAndAllComponentsAsync(moduleType) {\r\n        const ngModuleFactory = await this.compileModuleAsync(moduleType);\r\n        const componentFactories = this.testBed._getComponentFactories(moduleType);\r\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\r\n    }\r\n    clearCache() { }\r\n    clearCacheFor(type) { }\r\n    getModuleId(moduleType) {\r\n        const meta = this.testBed._getModuleResolver().resolve(moduleType);\r\n        return meta && meta.id || undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Whether test modules should be torn down by default. */\r\nconst TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT = true;\r\n/**\r\n * An abstract class for inserting the root test component element in a platform independent way.\r\n *\r\n * @publicApi\r\n */\r\nclass TestComponentRenderer {\r\n    insertRootElement(rootElementId) { }\r\n    removeAllRootElements() { }\r\n}\r\n/**\r\n * @publicApi\r\n */\r\nconst ComponentFixtureAutoDetect = new InjectionToken('ComponentFixtureAutoDetect');\r\n/**\r\n * @publicApi\r\n */\r\nconst ComponentFixtureNoNgZone = new InjectionToken('ComponentFixtureNoNgZone');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nlet _nextRootElementId = 0;\r\n/**\r\n * @description\r\n * Configures and initializes environment for unit testing and provides methods for\r\n * creating components and services in unit tests.\r\n *\r\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\r\n *\r\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\r\n * according to the compiler used.\r\n */\r\nclass TestBedRender3 {\r\n    constructor() {\r\n        // Properties\r\n        this.platform = null;\r\n        this.ngModule = null;\r\n        this._compiler = null;\r\n        this._testModuleRef = null;\r\n        this._activeFixtures = [];\r\n        this._globalCompilationChecked = false;\r\n    }\r\n    /**\r\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\r\n     * angular module. These are common to every test in the suite.\r\n     *\r\n     * This may only be called once, to set up the common providers for the current test\r\n     * suite on the current platform. If you absolutely need to change the providers,\r\n     * first use `resetTestEnvironment`.\r\n     *\r\n     * Test modules and platforms for individual platforms are available from\r\n     * '@angular/<platform_name>/testing'.\r\n     *\r\n     * @publicApi\r\n     */\r\n    static initTestEnvironment(ngModule, platform, summariesOrOptions) {\r\n        const testBed = _getTestBedRender3();\r\n        testBed.initTestEnvironment(ngModule, platform, summariesOrOptions);\r\n        return testBed;\r\n    }\r\n    /**\r\n     * Reset the providers for the test injector.\r\n     *\r\n     * @publicApi\r\n     */\r\n    static resetTestEnvironment() {\r\n        _getTestBedRender3().resetTestEnvironment();\r\n    }\r\n    static configureCompiler(config) {\r\n        _getTestBedRender3().configureCompiler(config);\r\n        return TestBedRender3;\r\n    }\r\n    /**\r\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\r\n     * which are defined in test_injector.js\r\n     */\r\n    static configureTestingModule(moduleDef) {\r\n        _getTestBedRender3().configureTestingModule(moduleDef);\r\n        return TestBedRender3;\r\n    }\r\n    /**\r\n     * Compile components with a `templateUrl` for the test's NgModule.\r\n     * It is necessary to call this function\r\n     * as fetching urls is asynchronous.\r\n     */\r\n    static compileComponents() {\r\n        return _getTestBedRender3().compileComponents();\r\n    }\r\n    static overrideModule(ngModule, override) {\r\n        _getTestBedRender3().overrideModule(ngModule, override);\r\n        return TestBedRender3;\r\n    }\r\n    static overrideComponent(component, override) {\r\n        _getTestBedRender3().overrideComponent(component, override);\r\n        return TestBedRender3;\r\n    }\r\n    static overrideDirective(directive, override) {\r\n        _getTestBedRender3().overrideDirective(directive, override);\r\n        return TestBedRender3;\r\n    }\r\n    static overridePipe(pipe, override) {\r\n        _getTestBedRender3().overridePipe(pipe, override);\r\n        return TestBedRender3;\r\n    }\r\n    static overrideTemplate(component, template) {\r\n        _getTestBedRender3().overrideComponent(component, { set: { template, templateUrl: null } });\r\n        return TestBedRender3;\r\n    }\r\n    /**\r\n     * Overrides the template of the given component, compiling the template\r\n     * in the context of the TestingModule.\r\n     *\r\n     * Note: This works for JIT and AOTed components as well.\r\n     */\r\n    static overrideTemplateUsingTestingModule(component, template) {\r\n        _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\r\n        return TestBedRender3;\r\n    }\r\n    static overrideProvider(token, provider) {\r\n        _getTestBedRender3().overrideProvider(token, provider);\r\n        return TestBedRender3;\r\n    }\r\n    static inject(token, notFoundValue, flags) {\r\n        return _getTestBedRender3().inject(token, notFoundValue, flags);\r\n    }\r\n    /** @deprecated from v9.0.0 use TestBed.inject */\r\n    static get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\r\n        return _getTestBedRender3().inject(token, notFoundValue, flags);\r\n    }\r\n    static createComponent(component) {\r\n        return _getTestBedRender3().createComponent(component);\r\n    }\r\n    static resetTestingModule() {\r\n        _getTestBedRender3().resetTestingModule();\r\n        return TestBedRender3;\r\n    }\r\n    static shouldTearDownTestingModule() {\r\n        return _getTestBedRender3().shouldTearDownTestingModule();\r\n    }\r\n    static tearDownTestingModule() {\r\n        _getTestBedRender3().tearDownTestingModule();\r\n    }\r\n    /**\r\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\r\n     * angular module. These are common to every test in the suite.\r\n     *\r\n     * This may only be called once, to set up the common providers for the current test\r\n     * suite on the current platform. If you absolutely need to change the providers,\r\n     * first use `resetTestEnvironment`.\r\n     *\r\n     * Test modules and platforms for individual platforms are available from\r\n     * '@angular/<platform_name>/testing'.\r\n     *\r\n     * @publicApi\r\n     */\r\n    initTestEnvironment(ngModule, platform, summariesOrOptions) {\r\n        if (this.platform || this.ngModule) {\r\n            throw new Error('Cannot set base providers because it has already been called');\r\n        }\r\n        // If `summariesOrOptions` is a function, it means that it's\r\n        // an AOT summaries factory which Ivy doesn't support.\r\n        TestBedRender3._environmentTeardownOptions =\r\n            typeof summariesOrOptions === 'function' ? undefined : summariesOrOptions?.teardown;\r\n        this.platform = platform;\r\n        this.ngModule = ngModule;\r\n        this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\r\n    }\r\n    /**\r\n     * Reset the providers for the test injector.\r\n     *\r\n     * @publicApi\r\n     */\r\n    resetTestEnvironment() {\r\n        this.resetTestingModule();\r\n        this._compiler = null;\r\n        this.platform = null;\r\n        this.ngModule = null;\r\n        TestBedRender3._environmentTeardownOptions = undefined;\r\n    }\r\n    resetTestingModule() {\r\n        this.checkGlobalCompilationFinished();\r\n        ɵresetCompiledComponents();\r\n        if (this._compiler !== null) {\r\n            this.compiler.restoreOriginalState();\r\n        }\r\n        this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\r\n        // We have to chain a couple of try/finally blocks, because each step can\r\n        // throw errors and we don't want it to interrupt the next step and we also\r\n        // want an error to be thrown at the end.\r\n        try {\r\n            this.destroyActiveFixtures();\r\n        }\r\n        finally {\r\n            try {\r\n                if (this.shouldTearDownTestingModule()) {\r\n                    this.tearDownTestingModule();\r\n                }\r\n            }\r\n            finally {\r\n                this._testModuleRef = null;\r\n                this._instanceTeardownOptions = undefined;\r\n            }\r\n        }\r\n    }\r\n    configureCompiler(config) {\r\n        if (config.useJit != null) {\r\n            throw new Error('the Render3 compiler JiT mode is not configurable !');\r\n        }\r\n        if (config.providers !== undefined) {\r\n            this.compiler.setCompilerProviders(config.providers);\r\n        }\r\n    }\r\n    configureTestingModule(moduleDef) {\r\n        this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\r\n        // Always re-assign the teardown options, even if they're undefined.\r\n        // This ensures that we don't carry the options between tests.\r\n        this._instanceTeardownOptions = moduleDef.teardown;\r\n        this.compiler.configureTestingModule(moduleDef);\r\n    }\r\n    compileComponents() {\r\n        return this.compiler.compileComponents();\r\n    }\r\n    inject(token, notFoundValue, flags) {\r\n        if (token === TestBedRender3) {\r\n            return this;\r\n        }\r\n        const UNDEFINED = {};\r\n        const result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\r\n        return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) :\r\n            result;\r\n    }\r\n    /** @deprecated from v9.0.0 use TestBed.inject */\r\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\r\n        return this.inject(token, notFoundValue, flags);\r\n    }\r\n    execute(tokens, fn, context) {\r\n        const params = tokens.map(t => this.inject(t));\r\n        return fn.apply(context, params);\r\n    }\r\n    overrideModule(ngModule, override) {\r\n        this.assertNotInstantiated('overrideModule', 'override module metadata');\r\n        this.compiler.overrideModule(ngModule, override);\r\n    }\r\n    overrideComponent(component, override) {\r\n        this.assertNotInstantiated('overrideComponent', 'override component metadata');\r\n        this.compiler.overrideComponent(component, override);\r\n    }\r\n    overrideTemplateUsingTestingModule(component, template) {\r\n        this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\r\n        this.compiler.overrideTemplateUsingTestingModule(component, template);\r\n    }\r\n    overrideDirective(directive, override) {\r\n        this.assertNotInstantiated('overrideDirective', 'override directive metadata');\r\n        this.compiler.overrideDirective(directive, override);\r\n    }\r\n    overridePipe(pipe, override) {\r\n        this.assertNotInstantiated('overridePipe', 'override pipe metadata');\r\n        this.compiler.overridePipe(pipe, override);\r\n    }\r\n    /**\r\n     * Overwrites all providers for the given token with the given provider definition.\r\n     */\r\n    overrideProvider(token, provider) {\r\n        this.assertNotInstantiated('overrideProvider', 'override provider');\r\n        this.compiler.overrideProvider(token, provider);\r\n    }\r\n    createComponent(type) {\r\n        const testComponentRenderer = this.inject(TestComponentRenderer);\r\n        const rootElId = `root${_nextRootElementId++}`;\r\n        testComponentRenderer.insertRootElement(rootElId);\r\n        const componentDef = type.ɵcmp;\r\n        if (!componentDef) {\r\n            throw new Error(`It looks like '${ɵstringify(type)}' has not been IVY compiled - it has no 'ɵcmp' field`);\r\n        }\r\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\r\n        const noNgZone = this.inject(ComponentFixtureNoNgZone, false);\r\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\r\n        const autoDetect = this.inject(ComponentFixtureAutoDetect, false);\r\n        const ngZone = noNgZone ? null : this.inject(NgZone, null);\r\n        const componentFactory = new ɵRender3ComponentFactory(componentDef);\r\n        const initComponent = () => {\r\n            const componentRef = componentFactory.create(Injector.NULL, [], `#${rootElId}`, this.testModuleRef);\r\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\r\n        };\r\n        const fixture = ngZone ? ngZone.run(initComponent) : initComponent();\r\n        this._activeFixtures.push(fixture);\r\n        return fixture;\r\n    }\r\n    /**\r\n     * @internal strip this from published d.ts files due to\r\n     * https://github.com/microsoft/TypeScript/issues/36216\r\n     */\r\n    get compiler() {\r\n        if (this._compiler === null) {\r\n            throw new Error(`Need to call TestBed.initTestEnvironment() first`);\r\n        }\r\n        return this._compiler;\r\n    }\r\n    /**\r\n     * @internal strip this from published d.ts files due to\r\n     * https://github.com/microsoft/TypeScript/issues/36216\r\n     */\r\n    get testModuleRef() {\r\n        if (this._testModuleRef === null) {\r\n            this._testModuleRef = this.compiler.finalize();\r\n        }\r\n        return this._testModuleRef;\r\n    }\r\n    assertNotInstantiated(methodName, methodDescription) {\r\n        if (this._testModuleRef !== null) {\r\n            throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` +\r\n                `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\r\n        }\r\n    }\r\n    /**\r\n     * Check whether the module scoping queue should be flushed, and flush it if needed.\r\n     *\r\n     * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\r\n     * in-progress module compilation. This creates a potential hazard - the very first time the\r\n     * TestBed is initialized (or if it's reset without being initialized), there may be pending\r\n     * compilations of modules declared in global scope. These compilations should be finished.\r\n     *\r\n     * To ensure that globally declared modules have their components scoped properly, this function\r\n     * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\r\n     * to any other operations, the scoping queue is flushed.\r\n     */\r\n    checkGlobalCompilationFinished() {\r\n        // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\r\n        // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\r\n        if (!this._globalCompilationChecked && this._testModuleRef === null) {\r\n            ɵflushModuleScopingQueueAsMuchAsPossible();\r\n        }\r\n        this._globalCompilationChecked = true;\r\n    }\r\n    destroyActiveFixtures() {\r\n        let errorCount = 0;\r\n        this._activeFixtures.forEach((fixture) => {\r\n            try {\r\n                fixture.destroy();\r\n            }\r\n            catch (e) {\r\n                errorCount++;\r\n                console.error('Error during cleanup of component', {\r\n                    component: fixture.componentInstance,\r\n                    stacktrace: e,\r\n                });\r\n            }\r\n        });\r\n        this._activeFixtures = [];\r\n        if (errorCount > 0 && this.shouldRethrowTeardownErrors()) {\r\n            throw Error(`${errorCount} ${(errorCount === 1 ? 'component' : 'components')} ` +\r\n                `threw errors during cleanup`);\r\n        }\r\n    }\r\n    shouldRethrowTeardownErrors() {\r\n        const instanceOptions = this._instanceTeardownOptions;\r\n        const environmentOptions = TestBedRender3._environmentTeardownOptions;\r\n        // If the new teardown behavior hasn't been configured, preserve the old behavior.\r\n        if (!instanceOptions && !environmentOptions) {\r\n            return TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\r\n        }\r\n        // Otherwise use the configured behavior or default to rethrowing.\r\n        return instanceOptions?.rethrowErrors ?? environmentOptions?.rethrowErrors ??\r\n            this.shouldTearDownTestingModule();\r\n    }\r\n    shouldTearDownTestingModule() {\r\n        return this._instanceTeardownOptions?.destroyAfterEach ??\r\n            TestBedRender3._environmentTeardownOptions?.destroyAfterEach ??\r\n            TEARDOWN_TESTING_MODULE_ON_DESTROY_DEFAULT;\r\n    }\r\n    tearDownTestingModule() {\r\n        // If the module ref has already been destroyed, we won't be able to get a test renderer.\r\n        if (this._testModuleRef === null) {\r\n            return;\r\n        }\r\n        // Resolve the renderer ahead of time, because we want to remove the root elements as the very\r\n        // last step, but the injector will be destroyed as a part of the module ref destruction.\r\n        const testRenderer = this.inject(TestComponentRenderer);\r\n        try {\r\n            this._testModuleRef.destroy();\r\n        }\r\n        catch (e) {\r\n            if (this.shouldRethrowTeardownErrors()) {\r\n                throw e;\r\n            }\r\n            else {\r\n                console.error('Error during cleanup of a testing module', {\r\n                    component: this._testModuleRef.instance,\r\n                    stacktrace: e,\r\n                });\r\n            }\r\n        }\r\n        finally {\r\n            testRenderer.removeAllRootElements?.();\r\n        }\r\n    }\r\n}\r\nlet testBed;\r\nfunction _getTestBedRender3() {\r\n    return testBed = testBed || new TestBedRender3();\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @description\r\n * Configures and initializes environment for unit testing and provides methods for\r\n * creating components and services in unit tests.\r\n *\r\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\r\n *\r\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\r\n * according to the compiler used.\r\n *\r\n * @publicApi\r\n */\r\nconst TestBed = TestBedRender3;\r\n/**\r\n * Returns a singleton of the applicable `TestBed`.\r\n *\r\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\r\n *\r\n * @publicApi\r\n */\r\nconst getTestBed = _getTestBedRender3;\r\n/**\r\n * Allows injecting dependencies in `beforeEach()` and `it()`.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\r\n *   // some code that uses `dep` and `object`\r\n *   // ...\r\n * }));\r\n *\r\n * it('...', inject([AClass], (object) => {\r\n *   object.doSomething();\r\n *   expect(...);\r\n * })\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction inject(tokens, fn) {\r\n    const testBed = getTestBed();\r\n    // Not using an arrow function to preserve context passed from call site\r\n    return function () {\r\n        return testBed.execute(tokens, fn, this);\r\n    };\r\n}\r\n/**\r\n * @publicApi\r\n */\r\nclass InjectSetupWrapper {\r\n    constructor(_moduleDef) {\r\n        this._moduleDef = _moduleDef;\r\n    }\r\n    _addModule() {\r\n        const moduleDef = this._moduleDef();\r\n        if (moduleDef) {\r\n            getTestBed().configureTestingModule(moduleDef);\r\n        }\r\n    }\r\n    inject(tokens, fn) {\r\n        const self = this;\r\n        // Not using an arrow function to preserve context passed from call site\r\n        return function () {\r\n            self._addModule();\r\n            return inject(tokens, fn).call(this);\r\n        };\r\n    }\r\n}\r\nfunction withModule(moduleDef, fn) {\r\n    if (fn) {\r\n        // Not using an arrow function to preserve context passed from call site\r\n        return function () {\r\n            const testBed = getTestBed();\r\n            if (moduleDef) {\r\n                testBed.configureTestingModule(moduleDef);\r\n            }\r\n            return fn.apply(this);\r\n        };\r\n    }\r\n    return new InjectSetupWrapper(() => moduleDef);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _global = (typeof window === 'undefined' ? global : window);\r\n// Reset the test providers and the fake async zone before each test.\r\nif (_global.beforeEach) {\r\n    _global.beforeEach(getCleanupHook(false));\r\n}\r\n// We provide both a `beforeEach` and `afterEach`, because the updated behavior for\r\n// tearing down the module is supposed to run after the test so that we can associate\r\n// teardown errors with the correct test.\r\nif (_global.afterEach) {\r\n    _global.afterEach(getCleanupHook(true));\r\n}\r\nfunction getCleanupHook(expectedTeardownValue) {\r\n    return () => {\r\n        // TODO(alxhub): find a better type here\r\n        if (TestBed.shouldTearDownTestingModule() === expectedTeardownValue) {\r\n            TestBed.resetTestingModule();\r\n            resetFakeAsyncZone();\r\n        }\r\n    };\r\n}\r\n/**\r\n * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\r\n * investigation.\r\n *\r\n * A work around is to mark it as `@codeGenApi` for now and investigate later.\r\n *\r\n * @codeGenApi\r\n */\r\n// TODO(iminar): Remove this code in a safe way.\r\nconst __core_private_testing_placeholder__ = '';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, waitForAsync, withModule, MetadataOverrider as ɵMetadataOverrider };\r\n\n"]},"metadata":{},"sourceType":"module"}